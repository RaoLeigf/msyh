@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    ViewBag.Title = "自定义功能树设置";
}


@section script
{
   @*<script src="~/NG3Resource/js/DMC/DMCCommon.js" type="text/javascript" charset="utf-8"></script>*@
   <script src=@Url.Script("~/NG3Resource/js/DMC/DMCCommon.js") type="text/javascript" charset="utf-8"></script>
   <link href="~/NG3Resource/css/mainTreeTab.css" rel="stylesheet" type="text/css" />  
   <script type="text/javascript">

   var contextMenuOpType = ""; //右键菜单操作类型

   var LoadEnFuncTreeRight = Ext.htmlDecode('@ViewBag.LoadEnFuncTreeRight');
       var UserType = Ext.htmlDecode('@ViewBag.UserType');

       if (LoadEnFuncTreeRight.substr(0, 1) == 1 && UserType != 'SYSTEM') {//第一个字符为1，启用企业功能树
           var MySuiteUrl = C_ROOT + 'SUP/EnFuncTree/GetSuiteList';
           var MyMenuUrl = C_ROOT + 'SUP/EnFuncTree/LoadMenu'; //像系统功能树一样做一个不懒加载的开关，否则添加到我的功能树会加不进去
           var MyQueryUrl = C_ROOT + 'SUP/EnFuncTree/Query';
           
       } else {
           var MySuiteUrl = C_ROOT + 'SUP/MainTree/GetSuiteList';
           var MyMenuUrl = C_ROOT + 'SUP/MainTree/LoadMenu' + "?lazyLoadFlag=false";
           var MyQueryUrl = C_ROOT + 'SUP/MainTree/Query';
       }

       var custommenutree;
       var StoreloadMarsk;
       Ext.onReady(function () {

            var langInfo = Ext.htmlDecode('@ViewBag.NG3Lang');
           var Lang = Ext.isEmpty(langInfo) ? {} : Ext.decode(langInfo); //自定义
           var isWeb = (window.external.IsInWebBrowser == undefined);

           //通过节点node找到树的根节点
            function findRoot(node) {
                while (!node.isRoot()) {
                    node = node.parentNode;
                }
                return node;
            }

            //展开根为root的树的所有节点
            function expandTree(root) {
                if (root.hasChildNodes()) {
                    root.expand();
                    for (var i = 0; i < root.childNodes.length; i++) {
                        expandTree(root.childNodes[i]);
                    }
                }

            }

            //折叠根为root的树的所有节点
            function collapseTree(root) {
                if (root.hasChildNodes()) {
                    //root.collapse();
                    for (var i = 0; i < root.childNodes.length; i++) {
                        if (root.childNodes[i].hasChildNodes()) {
                            root.childNodes[i].collapse();
                            collapseTree(root.childNodes[i]);
                        }
                    }
                }
            }

            var currentTree;
            //系统功能树
            Ext.define('Ext.ng.checkSysFuncTree', {
                extend: 'Ext.tab.Panel',
                alias: 'widget.ngCheckSysFuncTree',
                tabPosition: 'left',
                suites: [],
                tabBar: {
                    width: 30
                },
                initComponent: function () {
                    var me = this;
                    this.callParent();
                    me.menu = Ext.create('Ext.menu.Menu', {
                        //selectedNode:null,
                        items: [
                             {
                                text: '全选',
                                handler: function () {
                                    var node = me.menu.selectedNode;
                                    var root = findRoot(node);
                                    treeNodeCheckBoxSelected(root, true);
                                    root.set({ checked: false });
                                }
                            },
                            {
                                text: '反选',
                                handler: function () {
                                    var node = me.menu.selectedNode;
                                    var root = findRoot(node);
                                    treeNodeCheckBoxSelected(root, false);
                                }
                            }, '-',
                            {
                                text: '全部展开',
                                handler: function () {
                                    var node = me.menu.selectedNode;
                                    var root = findRoot(node);
                                    expandTree(root);
                                }
                            },
                            {
                                text: '全部折叠',
                                handler: function () {
                                    var node = me.menu.selectedNode;
                                    var root = findRoot(node);
                                    collapseTree(root);
                                }
                            }
                        ]
                    });
                    me.loadData();
                    me.tabBar.on('change', function (tabBar, tab, card, eOpts) {
                        tabBar.needsScroll = false;//禁止tabBar乱滚动，抽风
                    });
                },
                loadData: function () {
                    var me = this;
                    var arr = [];
                    Ext.Ajax.request({
                        url: MySuiteUrl,
                        async: false,
                        success: function (res, opts) {
                            if (res.responseText.length > 0) {
                                var suites = Ext.JSON.decode(res.responseText);
                                for (var i = 0; i < suites.length; i++) {
                                    var title = suites[i].Name.split('').join('<br>');
                                    if (!Ext.isIE) {
                                        var height = '15px';
                                        var width = suites[i].Name.length * 15;
                                        var left = suites[i].Name.length * 7.0 + 2;
                                        //firefox
                                        if (!Ext.isChrome) {
                                            width = suites[i].Name.length * 17;
                                            left = suites[i].Name.length * 7.5;
                                        }
                                        //if (isNeptune) {
                                        //    height = '16px';
                                        //}                                        //
                                        title = "<div style='-webkit-transform: rotate(90deg);-moz-transform:rotate(90deg);filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=180);width:" + width + "px;height:" + height + ";left:" + left + "px !important;position: relative;padding: 8px 8px 8px 8px;'>"
                                                    + suites[i].Name.split('').join('<br>') + "</div>";
                                    }

                                    var menu = Ext.create('Ext.ng.TreePanel', {
                                        autoLoad: false,
                                        height: 600,
                                        split: true,
                                        checked: false,
                                        border: false,
                                        //title: suites[i].Name,//title,
                                        title: title,
                                        suite: suites[i].Code,
                                        layout: 'fit',
                                        treeFields: [{ name: 'text', type: 'string' },
                                            { name: 'checked', type: 'boolean', values: false },
                                            { name: 'my', type: 'string' }//我的自定义属性
                                        ],
                                        url: MyMenuUrl, //'HR/EmpInfoList/LoadMenu'
                                        //params: { functiontree: 'myFuncTree'},
                                        listeners: {
                                            'afterrender': function () {
                                                //this.expandAll();
                                            },
                                            'expand': function () {
                                                var me = this;
                                                Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                                this.getRootNode().expand();
                                            },
                                            'activate': function () {
                                                var me = this;
                                                Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                                //this.getRootNode().expand();//有些电脑会全部出发这个事件，达不到懒加载目的
                                            },
                                            'itemdblclick': function (view, rcd, item, idx, event, eOpts) {
                                                if (rcd.raw.leaf) {
                                                    WF.Center.openTab(rcd.raw.text, rcd.raw.url);
                                                }
                                            },
                                            'checkchange': function (node, checked) {
                                                setChildNodeChecked(node, checked);
                                            },
                                            'itemcontextmenu': function (view, rec, node, index, e) {
                                                e.stopEvent();
                                                var ngCheckSysFuncTree = this.findParentByType('ngCheckSysFuncTree');
                                                ngCheckSysFuncTree.menu.selectedNode = rec;
                                                ngCheckSysFuncTree.menu.showAt(e.getXY());
                                                return false;
                                            },
                                            'containercontextmenu': function (treeP, e, eOpts) {
                                                e.stopEvent();
                                                var ngCheckSysFuncTree = this.findParentByType('ngCheckSysFuncTree');
                                                ngCheckSysFuncTree.menu.selectedNode = treeP.store.data.items[0];
                                                ngCheckSysFuncTree.menu.showAt(e.getXY());
                                                return false;
                                            }
                                        }
                                    });
                                    arr.push(menu);
                                }


                                //在for循环外，添加报表仓库和文档库                             
                                var myTitle = '报表仓库';
                                var menu = Ext.create('Ext.ng.TreePanel', {
                                    autoLoad: false,
                                    height: 600,
                                    split: true,
                                    suiteName: '报表仓库',
                                    border: false,
                                    //title: suites[i].Name,//title,
                                    title: "<div style='-webkit-transform: rotate(90deg);-moz-transform:rotate(90deg);filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=180);width:60px;height:15px;left:30px !important;position: relative;padding: 8px 8px 8px 8px;'>" + myTitle.split('').join('<br>') + "</div>",
                                    //suite: suites[i].Code,
                                    layout: 'fit',
                                    treeFields: [{ name: 'text', type: 'string' },
                                            { name: 'checked', type: 'boolean', values: false },
                                            { name: 'my', type: 'string' }//我的自定义属性
                                    ],
                                    url: C_ROOT + 'SUP/ReportList/LoadReportList?page=individualtree', //'HR/EmpInfoList/LoadMenu'
                                    listeners: {
                                        'afterrender': function () {
                                            //this.expandAll();
                                        },
                                        'expand': function () {
                                            var me = this;
                                            Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite});
                                            this.getRootNode().expand();
                                        },
                                        'activate': function () {
                                            var me = this;
                                            Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                            //this.getRootNode().expand();//有些电脑会全部出发这个事件，达不到懒加载目的
                                        },
                                        'checkchange': function (node, checked) {
                                            setChildNodeChecked(node, checked);
                                        },
                                        'itemdblclick': function (view, rcd, item, idx, event, eOpts) {
                                            if (rcd.raw.leaf && window.external.IsInWebBrowser != undefined) {
                                                //WF.Center.openTab(rcd.raw.text, rcd.raw.url);
                                                if (me.hasDbClickListener == true) {
                                                    var param = { 'str': rcd.raw.text, 'rightname': rcd.raw.rightname, 'managername': rcd.raw.managername, 'moduleno': rcd.raw.moduleno, 'id': rcd.raw.code, 'url': rcd.raw.url, 'suite': rcd.raw.suite, 'rightkey': rcd.raw.rightkey, 'functionname': rcd.raw.functionname, 'opentype': 'myfunction' };
                                                    window.external.OpenFunction(rcd.raw.url, JSON.stringify(param));
                                                }
                                            }
                                        }
                                    }
                                });

                                //在for循环外，添加报表仓库和文档库                             
                                var wocTitle = '文档库';
                                Ext.define('Ext.ng.WMDocTree', {
                                    extend: 'Ext.tree.TreePanel',
                                    alias: 'widget.ngDocTree',
                                    animate: true,
                                    collapsible: false,
                                    useArrows: true,
                                    rootVisible: false,
                                    hideHeaders: true,
                                    selectMode: 'Single',
                                    nodeIndex: -1,
                                    type: 'MY',
                                    filter: '',

                                    autoLoad: false,
                                    height: 600,
                                    split: true,
                                    suiteName: '文档库',
                                    border: false,
                                    //title: suites[i].Name,//title,
                                    title: "<div style='-webkit-transform: rotate(90deg);-moz-transform:rotate(90deg);filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=180);width:45px;height:15px;left:23px !important;position: relative;padding: 8px 8px 8px 8px;'>" + wocTitle.split('').join('<br>') + "</div>",
                                    //suite: suites[i].Code,
                                    layout: 'fit',
                                    treeFields: [
                                            { name: 'checked', type: 'boolean', values: false }
                                    ],
                                    columns: [
                                        {
                                            text: '物理主键',
                                            flex: 0,
                                            sortable: false,
                                            dataIndex: 'PhId',
                                            hideable: false,
                                            hidden: true
                                        }, {
                                            text: '代码',
                                            flex: 0,
                                            dataIndex: 'CNo',
                                            sortable: false,
                                            hideable: false,
                                            hidden: true
                                        }, {
                                            text: '名称',
                                            flex: 1,
                                            xtype: 'treecolumn',
                                            dataIndex: 'Text',
                                            hidden: false,
                                            hideable: false,
                                            align: 'left'
                                        }, {
                                            text: '名称',
                                            flex: 0,
                                            dataIndex: 'CName',
                                            hidden: true,
                                            hideable: false,
                                            sortable: false,
                                            align: 'left'
                                        }
                                    ],
                                    initComponent: function () {
                                        var me = this;
                                        Ext.define('model', {
                                            extend: 'Ext.data.Model',
                                            fields: [
                                                {
                                                    name: 'PhId',
                                                    type: 'string',
                                                    mapping: 'PhId'
                                                }, {
                                                    name: 'CNo',
                                                    type: 'string',
                                                    mapping: 'CNo'
                                                }, {
                                                    name: 'CName',
                                                    type: 'string',
                                                    mapping: 'CName'
                                                }, {
                                                    name: 'Text',
                                                    type: 'string',
                                                    mapping: 'text'
                                                }, {
                                                    name: 'IsDoc',
                                                    type: 'string',
                                                    mapping: 'IsDoc'
                                                }, {
                                                    name: 'DocType',
                                                    type: 'string',
                                                    mapping: 'DocType'
                                                }, {
                                                    name: 'Doclibid',
                                                    type: 'string',
                                                    mapping: 'Doclibid'
                                                }, {
                                                    name: 'WbsId',
                                                    type: 'string',
                                                    mapping: 'WbsId'
                                                }
                                            ]
                                        });
                                        var store = Ext.create('Ext.data.TreeStore', {
                                            model: 'model',
                                            autoLoad: false,
                                            proxy: {
                                                type: 'ajax',
                                                url: C_ROOT + 'WM/Doc/Document/GetDocumentForGuid'
                                            }
                                        });
                                        store.on('beforeload', function (store) {
                                            if (me.type) {
                                                Ext.apply(store.proxy.extraParams, { 'type': me.type });
                                            }
                                            if (me.filter || me.filter == '') {
                                                Ext.apply(store.proxy.extraParams, { 'filter': me.filter });
                                            }
                                        });
                                        me.store = store;
                                        //me.dockedItems = [
                                        //    {
                                        //        xtype: 'toolbar',
                                        //        height: 26,
                                        //        dock: 'top',
                                        //        layout: 'border',
                                        //        minWidth: 200,
                                        //        items: [
                                        //            {
                                        //                region: 'center',
                                        //                xtype: 'textfield',
                                        //                id: 'WMDocTree_query',
                                        //                name: 'queryname',
                                        //                emptyText: '搜索内容'
                                        //            }, {
                                        //                region: 'east',
                                        //                width: 40,
                                        //                text: '搜索',
                                        //                handler: function () {
                                        //                    var searchfilter = me.down('#WMDocTree_query');
                                        //                    me.filter = searchfilter.value;
                                        //                    store.load();
                                        //                }
                                        //            }, {
                                        //                region: 'east',
                                        //                width: 40,
                                        //                text: '刷新',
                                        //                anchor: '100%',
                                        //                handler: function () {
                                        //                    var searchfilter = me.down('#WMDocTree_query');
                                        //                    searchfilter.setValue('');
                                        //                    me.filter = '';
                                        //                    store.load();
                                        //                }
                                        //            }
                                        //        ]
                                        //    }
                                        //];
                                        me.callParent();
                                    },
                                    //listeners: {
                                    //    'itemdblclick': function (item, record, it, index, e, eOpts) {
                                    //        if (record.data.DocType == "1") {
                                    //            var id = record.data.PhId;
                                    //            $OpenTab('企业文档-查看', C_ROOT + 'WM/Doc/Document/DocumentEdit?otype=view&id=' + id);
                                    //        } else if (record.data.DocType == "2") {
                                    //            $OpenTab('项目文档库', C_ROOT + 'WM/Doc/ProjectDocument/ProjectDocumentListFromGuid?phid=' + record.data.PhId + '&doclibid=' + record.data.Doclibid + '&wbsid=' + record.data.WbsId);
                                    //        }
                                    //    }
                                    //}
                                });
                                var menuWoc = Ext.create('Ext.ng.WMDocTree', {
                                    
                                });

                                


                                if (me.hasRightClickMenu == true) {
                                    menu.addListener('itemcontextmenu', function (view, rec, node, index, e) {
                                        e.stopEvent();
                                        var ngSysFuncTree = view.findParentByType('ngSysFuncTree');
                                        if (rec.data.leaf == true) {
                                            ngSysFuncTree.itemMenu.selectedNode = rec;
                                            ngSysFuncTree.itemMenu.showAt(e.getXY());
                                        } else {
                                            ngSysFuncTree.containMenu.selectedNode = rec;
                                            ngSysFuncTree.containMenu.showAt(e.getXY());
                                        }
                                        return false;
                                    });
                                    menu.addListener('containercontextmenu', function (treeP, e, eOpts) {
                                        e.stopEvent();
                                        var ngSysFuncTree = this.findParentByType('ngSysFuncTree');
                                        ngSysFuncTree.containMenu.selectedNode = treeP.store.data.items[0];
                                        ngSysFuncTree.containMenu.showAt(e.getXY());
                                        return false;
                                    })
                                };
                                if (UserType != 'SYSTEM') {
                                    arr.push(menu);
                                    arr.push(menuWoc);
                                }


                                me.suites = arr; //第一次加载把arr存在suites中
                                //me.items = arr;
                                me.add(arr);
                                Ext.apply(arr[0].getStore().proxy.extraParams, { suite: arr[0].suite });
                                arr[0].getRootNode().expand();//加载第一个
                                currentTree = arr[0];
                            }
                        }
                    });// 画出左侧菜单树
                },
                height: 300,
                width: 300,
                itemId: 'ngCheckSysFuncTree',
                dockedItems: [{
                    xtype: 'toolbar',
                    width: 300,
                    dock: 'top',
                    //layout: 'border',
                    //minWidth: 200,
                    items: [
                        {
                            width: 180,
                            //region: 'center',
                            xtype: 'textfield',
                            itemId: 'query',
                            name: 'queryname',
                            emptyText: '搜索内容',
                            enableKeyEvents: true,
                            listeners: {
                                'keydown': function (el, e, eOpts) {
                                    if (e.getKey() == e.ENTER) {
                                        var condition = this.ownerCt.queryById('query').getValue();
                                        //alert(condition);
                                        if (condition == '' || condition == null) {
                                            //alert('请输入搜索内容');
                                            return;
                                        };
                                        var ngCheckSysFuncTree = this.findParentByType('ngCheckSysFuncTree');//找到根节点
                                        var itemsLength = ngCheckSysFuncTree.items.items.length;
                                        ngCheckSysFuncTree.setActiveTab(ngCheckSysFuncTree.items.items[itemsLength - 1]);
                                        ngCheckSysFuncTree.removeAll();
                                        var orgtitle = "搜索结果";
                                        title = "<div style='-webkit-transform: rotate(90deg);-moz-transform:rotate(90deg);filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=180);width:" + orgtitle.length * 15 + "px; height:15px; left:" + (orgtitle.length * 7 + 2) + "px !important;position: relative;position: relative;padding: 8px 8px 8px 8px;'>"
                                                    + orgtitle.split('').join('<br>') + "</div>";
                                        var qmenu = Ext.create('Ext.ng.TreePanel', {
                                            autoLoad: false,
                                            height: 600,
                                            split: true,
                                            border: false,
                                            text: "员工",
                                            title: title,
                                            layout: 'fit',
                                            treeFields: [{ name: 'text', type: 'string' },
                                                { name: 'checked', type: 'boolean', values: false },
                                                { name: 'my', type: 'string' }//我的自定义属性
                                            ],
                                            url: MyQueryUrl,
                                            listeners: {
                                                'afterrender': function () {
                                                },
                                                'expand': function () {
                                                    var me = this;
                                                    Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                                    this.getRootNode().expand();
                                                },
                                                'activate': function () {
                                                    var me = this;
                                                    Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                                    //this.getRootNode().expand();//有些电脑会全部出发这个事件，达不到懒加载目的
                                                },
                                                'itemdblclick': function (view, rcd, item, idx, event, eOpts) {
                                                    if (rcd.raw.leaf && window.external.IsInWebBrowser != undefined) {
                                                        //WF.Center.openTab(rcd.raw.text, rcd.raw.url);
                                                        var param = { 'str': rcd.raw.text, 'rightname': rcd.raw.rightname, 'managername': rcd.raw.managername, 'moduleno': rcd.raw.moduleno, 'id': rcd.raw.code, 'url': rcd.raw.url, 'suite': rcd.raw.suite, 'rightkey': rcd.raw.rightkey, 'functionname': rcd.raw.functionname, 'opentype': 'myfunction' };
                                                        window.external.OpenFunction(rcd.raw.url, JSON.stringify(param));
                                                    }
                                                },
                                                'checkchange': function (node, checked) {
                                                    setChildNodeChecked(node, checked);
                                                }
                                            }
                                        });
                                        ngCheckSysFuncTree.add(qmenu);
                                        Ext.apply(qmenu.getStore().proxy.extraParams, { condition: condition });
                                        qmenu.getRootNode().expand();//加载第一个
                                        currentTree = qmenu;
                                        return false;
                                    }
                                }
                            }
                        }, {
                            //region: 'east',
                            //width: 40,
                            //text: '搜索',
                            iconCls: 'icon-Query',
                            handler: function () {
                                //var s = this.up('toolbar');
                                var condition = this.ownerCt.queryById('query').getValue();
                                if (condition == '' || condition == null) {
                                    //alert('请输入搜索内容');
                                    return;
                                };                             
                                var ngCheckSysFuncTree = this.findParentByType('ngCheckSysFuncTree');//找到根节点
                                var itemsLength = ngCheckSysFuncTree.items.items.length;
                                ngCheckSysFuncTree.setActiveTab(ngCheckSysFuncTree.items.items[itemsLength - 1]);
                                ngCheckSysFuncTree.removeAll();
                                var orgtitle = "搜索结果";
                                title = "<div style='-webkit-transform: rotate(90deg);-moz-transform:rotate(90deg);filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=180);width:" + orgtitle.length * 15 + "px; height:15px; left:" + (orgtitle.length * 7 + 2) + "px !important;position: relative;padding: 8px 8px 8px 8px;'>"
                                            + orgtitle.split('').join('<br>') + "</div>";
                                var qmenu = Ext.create('Ext.ng.TreePanel', {
                                    autoLoad: false,
                                    height: 600,
                                    split: true,
                                    border: false,
                                    text: "员工",
                                    title: title,
                                    layout: 'fit',
                                    treeFields: [{ name: 'text', type: 'string' },
                                        { name: 'checked', type: 'boolean', values: false },
                                        { name: 'my', type: 'string' }//我的自定义属性
                                    ],
                                    //url: C_ROOT + 'SUP/MainTree/LoadMenu', //'HR/EmpInfoList/LoadMenu'
                                    url: MyQueryUrl,
                                    listeners: {
                                        'afterrender': function () {
                                            //this.expandAll();
                                        },
                                        'expand': function () {
                                            var me = this;
                                            Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                            this.getRootNode().expand();
                                        },
                                        'activate': function () {
                                            var me = this;
                                            Ext.apply(this.getStore().proxy.extraParams, { suite: me.suite });
                                            //this.getRootNode().expand();//有些电脑会全部出发这个事件，达不到懒加载目的
                                        },
                                        'itemdblclick': function (view, rcd, item, idx, event, eOpts) {
                                            if (rcd.raw.leaf) {
                                                WF.Center.openTab(rcd.raw.text, rcd.raw.url);
                                            }
                                        },
                                        'checkchange': function (node, checked) {
                                            setChildNodeChecked(node, checked);
                                        }
                                    }
                                });
                                ngCheckSysFuncTree.add(qmenu);
                                Ext.apply(qmenu.getStore().proxy.extraParams, { condition: condition });
                                qmenu.getRootNode().expand();//加载第一个
                                currentTree = qmenu;
                            }
                        }, {
                            //region: 'east',
                            //width: 40,
                            //text: '刷新',
                            iconCls: 'icon-Refresh',
                            anchor: '100%',
                            handler: function () {
                                //alert('刷新');
                                this.ownerCt.queryById('query').setValue('');
                                var ngCheckSysFuncTree = this.findParentByType('ngCheckSysFuncTree');//找到根节点
                                var itemsLength = ngCheckSysFuncTree.items.items.length;
                                ngCheckSysFuncTree.setActiveTab(ngCheckSysFuncTree.items.items[itemsLength - 1]);
                                ngCheckSysFuncTree.removeAll();

                                ngCheckSysFuncTree.loadData();
                                //sysFuncTree.removeAll();
                                //var arr = sysFuncTree.suites;
                                //sysFuncTree.add(arr);
                                //Ext.apply(arr[0].getStore().proxy.extraParams, { suite: arr[0].suite });
                                //arr[0].getRootNode().expand();
                            }
                        }]
                }],
                listeners: {
                    'afterrender': function (tabPanel, eOpts) {
                        ////var result = Ext.getClass(tabPanel.tabBar.getLayout().overflowHandler).prototype.handleOverflow.apply(tabPanel.tabBar.getLayout().overflowHandler, arguments);
                        ////向下滚动箭头长按计时器，每秒执行一次
                        //var taskDown = {
                        //    run: function () {
                        //        var temp = tabPanel.tabBar.getLayout().overflowHandler;
                        //        temp.scrollBy(20, false);
                        //    },
                        //    interval: 100 //1 second
                        //}
                        ////向下滚动箭头样式、鼠标覆盖样式、鼠标点击事件
                        //var buttonDown = tabPanel.tabBar.body.createChild({
                        //    cls: Ext.baseCSSPrefix + 'tab-scroll-arrow-down'
                        //}, tabPanel.tabBar.body.child('.' + Ext.baseCSSPrefix + 'tab-scroll-arrow-down'));
                        //buttonDown.addClsOnOver(Ext.baseCSSPrefix + 'tab-scroll-arrow-down-over');
                        //buttonDown.on('click', function () {
                        //    //tabPanel.tabBar.getLayout().overflowHandler.scrollBy(-20, false);
                        //    var temp = tabPanel.tabBar.getLayout().overflowHandler;
                        //    temp.scrollBy(20,false);
                        //}, buttonDown);
                        ////鼠标按下，开始计时
                        //buttonDown.on('mousedown', function () {
                        //    Ext.TaskManager.start(taskDown);
                        //}, buttonDown);
                        ////鼠标松开，停止计时
                        //buttonDown.on('mouseup', function () {
                        //    Ext.TaskManager.stop(taskDown);
                        //}, buttonDown);
                        ////向上滚动箭头长按计时器，每秒执行一次
                        //var taskUp = {
                        //    run: function () {
                        //        var temp = tabPanel.tabBar.getLayout().overflowHandler;
                        //        temp.scrollBy(-20, false);
                        //    },
                        //    interval: 100 //1 second
                        //}
                        //var buttonUp = tabPanel.tabBar.body.createChild({
                        //    cls: Ext.baseCSSPrefix + 'tab-scroll-arrow-up'
                        //}, tabPanel.tabBar.body.child('.' + Ext.baseCSSPrefix + 'tab-scroll-arrow-up'));
                        //buttonUp.addClsOnOver(Ext.baseCSSPrefix + 'tab-scroll-arrow-up-over');
                        //buttonUp.on('click', function () {
                        //    //tabPanel.tabBar.getLayout().overflowHandler.scrollBy(-20, false);
                        //    var temp = tabPanel.tabBar.getLayout().overflowHandler;
                        //    temp.scrollBy(-20, false);
                        //}, buttonUp);
                        //buttonUp.on('mousedown', function () {
                        //    Ext.TaskManager.start(taskUp);
                        //}, buttonUp);
                        //buttonUp.on('mouseup', function () {
                        //    Ext.TaskManager.stop(taskUp);
                        //}, buttonUp);
                        ////找到包含原生滚动小箭头的div
                        //var codeDiv = Ext.query("*[class=x-box-inner x-box-scroller-bottom]");
                        ////往div插入自定义滚动小箭头
                        ////codeDiv[1].innerHTML = '<div class="x-tab-tabmenu-right" ></div>';
                        //if (codeDiv != null && codeDiv != '') {
                        //    codeDiv[1].appendChild(buttonUp.dom);
                        //    codeDiv[1].appendChild(buttonDown.dom);
                        //}

                        var parent = Ext.query("*[class=x-tab-bar-body x-tab-bar-body-default x-tab-bar-body-vertical x-tab-bar-body-default-vertical x-tab-bar-body-left x-tab-bar-body-default-left x-tab-bar-body-vertical-noborder x-tab-bar-body-default-vertical-noborder x-tab-bar-body-docked-left x-tab-bar-body-default-docked-left x-box-layout-ct x-tab-bar-body-default x-tab-bar-body-default-vertical x-tab-bar-body-default-left x-tab-bar-body-default-vertical-noborder x-tab-bar-body-default-docked-left]");
                        //var leftChild = document.getElementById('tabbar - 1064 - body');
                        if (parent != null & parent != '') {
                            for (var i = 0; i < parent.length; i++) {
                                var topChild = Ext.query("*[class=x-box-inner x-box-scroller-top]");
                                var bottomChild = Ext.query("*[class=x-box-inner x-box-scroller-bottom]");
                                topChild[i].style.width = '34px';
                                bottomChild[i].style.width = '34px';
                                parent[i].removeChild(topChild[i]);
                                parent[i].removeChild(bottomChild[i]);
                                parent[i].appendChild(topChild[i]);
                                parent[i].appendChild(bottomChild[i]);
                            }
                        }
                    },
                    'tabchange': function (tabPanel, newCard, oldCard, eOpts) {
                        currentTree = newCard;
                        if (!newCard.loaded) {
                            var me = newCard;
                            Ext.apply(me.getStore().proxy.extraParams, { suite: me.suite });
                            me.getRootNode().expand();
                            newCard.loaded = true;//已经加载
                        }
                    }
                }
            })
            var sysmenupnl = Ext.create('Ext.ng.checkSysFuncTree', {
                region: 'west',
                width:330,
                id: 'ngCheckSysFuncTree'
            })

            //工具栏
            var ngToolbar = Ext.create('Ext.ng.Toolbar', {
                region: 'north',
                //rightName: '', //权限名称
                ngbuttons: [
                    'save','->', 'close'
                ]
            })

            //左右移动节点的按钮区域
            var choosecenterform = Ext.create('Ext.form.Panel', {
                region: 'west',
                style: 'margin-left:2px;margin-right:0px',
                layout: 'border',
                width: 40,
                split: true,
                autoScroll: true,
                frame: false,
                border: false,
                columnsPerRow: 4,
                fieldDefaults: {
                    labelWidth: 40,
                    anchor: '100%',
                    margin: '0 10 5 0',
                    msgTarget: 'side'
                },
                items: [
                    {
                        region: 'north',
                        xtype: 'button',
                        id: 'rightmove',
                        text: '>',
                        margin: '170 0 0 0',
                        width: 20,
                        height: 20
                    },
                    {
                        region: 'north',
                        xtype: 'button',
                        id: 'leftmove',
                        text: '<',
                        margin: '50 0 0 0',
                        width: 20,
                        height: 20
                    }
                ]
            })

           //上下移动节点的按钮区域
            var changeSeqForm = Ext.create('Ext.form.Panel', {
                region: 'east',
                style: 'margin-left:2px;margin-right:0px',
                layout: 'border',
                width: 40,
                split: true,
                autoScroll: true,
                frame: false,
                border: false,
                columnsPerRow: 4,
                fieldDefaults: {
                    labelWidth: 40,
                    anchor: '100%',
                    margin: '0 10 5 0',
                    msgTarget: 'side'
                },
                items: [
                    {
                        region: 'north',
                        xtype: 'button',
                        id: 'upmove',
                        text: '∧',
                        margin: '170 0 0 0',
                        width: 20,
                        height: 20
                    },
                    {
                        region: 'north',
                        xtype: 'button',
                        id: 'downmove',
                        text: '∨',
                        margin: '50 0 0 0',
                        width: 20,
                        height: 20
                    }
                ]
            })

       
            ////自定义功能树上toolbar
            //var toolbar = Ext.create('Ext.toolbar.Toolbar', {
            //    //xtype: 'toolbar',
            //    width: 300,
            //    //dock: 'top',
            //    items: [
            //        {
            //            width: 180,
            //            xtype: 'textfield',
            //            itemId: 'queryKey',
            //            name: 'queryKey',
            //            emptyText: '搜索内容'
            //        }, '->', {
            //            text: '搜索',
            //            iconCls: 'icon-Location',
            //            itemId: 'query'
            //        }, {
            //            text: '刷新',
            //            iconCls: 'icon-Location',
            //            itemId: 'refresh'
            //        }]
            //})
              
            
            Ext.define('editParmModel', {
                extend: 'Ext.data.Model',
                fields: [{
                    name: 'name',
                    type: 'string',
                    mapping: 'Name'
                }, {
                    name: 'description',
                    type: 'string',
                    mapping: 'Description'
                }, {
                    name: 'currentValue',
                    type: 'string',
                    mapping: 'CurrentValue'
                }]
            });
            var editParmStore = Ext.create('Ext.data.Store', { //可以加排序函数对数据排序
                model: 'editParmModel',
                autoLoad: true,
                proxy: { //读取原始数据的途径
                    type: 'ajax',
                    url: C_ROOT + 'SUP/MainTree/LoadEditParm'
                }
            });

            Ext.define('Ext.ng.editParmWin', {
                extend: 'Ext.window.Window',
                alias: 'widget.ngEditParmWin', //别名,可通过设置xtype构建,或者通过Ext.widget()方法构建
                title: '参数编辑',
                height: 500,
                width: 400,
                modal: true,
                closeable: true,
                resizable: false,
                closeAction: "hide",
                father:'',
                fieldDefaults: {
                    //labelAlign: 'top',
                    msgTarget: 'side'
                },
                defaults: {
                    anchor: '100%'
                },
                items: [{
                    xtype: 'container',
                    layout: 'auto',
                    border: false,
                    items: [{
                        xtype: 'toolbar',
                        anchor: '100%',
                        items: [
                            "->",
                            {
                                text: '保存',
                                iconCls: 'icon-save',
                                handler: function () {
                                    var window = this.findParentByType('window');
                                    var textArea = window.items.items[0].items.items[1];
                                    var data = textArea.value;
                                    window.father.items.items[0].items.items[2].items.items[0].items.items[0].items.items[0].setValue(data);
                                    window.close();
                                }
                            },
                            {
                                text: '取消',
                                iconCls: 'icon-Cancel',
                                handler: function () {
                                    var window = this.findParentByType('window');
                                    window.close();
                                }
                            }
                        ]
                    }, {
                        emptyText: '添加宏参数',
                        height: 200,
                        width: 390,
                        itemId:'parmArea',
                        xtype: 'ngTextArea',
                        grow: true,
                        anchor: '100%'
                    }, {
                        xtype: 'grid',
                        anchor: '100%',
                        height: 200,
                        isVisible: true,
                        itemId:'pramGrid',
                        store: editParmStore,
                        columns: [
                            { text: '宏', dataIndex: 'name', flex: 1 },
                            { text: '描述', dataIndex: 'description', flex: 1 },
                            { text: '当前值', dataIndex: 'currentValue', flex: 1 }
                        ]                       
                    }]
                }],
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'bottom',
                    ui: 'footer',
                    items: [
                         "->", {
                        text: '插入',
                        handler: function () {
                            var window = this.findParentByType('window');
                            var data = window.items.items[0].items.items[2].getSelectionModel().lastSelected.data.name;
                            data = '№*№' + data + '№*№';
                            var textArea = window.items.items[0].items.items[1];
                            var rawValue = textArea.rawValue;
                            textArea.setValue(rawValue + data);
                        }
                    },
                {
                    text: '宏',
                    handler: function () {
                        var window = this.findParentByType('window');
                        if (window.height > 300){
                            window.setHeight(300);
                        } else {
                            window.setHeight(500);
                        }
                    }
                }
                    ]
                }]
            });
            
            //var importEleWin =
            Ext.define("Ext.ng.importDocWin", {
                extend: 'Ext.window.Window',
                alias: 'widget.ngImportDocWin',
                title: "节点维护",
                modal: true,
                //width: 500,
                //height: 160,
                width: 600,
                height: 180,
                closeable: true,
                resizable: false,
                //closeAction: "hide",
                winType: '',
                editFileField:'',
                items: [
                {
                    xtype: 'ngTableLayoutForm',
                    //id: 'customMenuNodeTextForm',
                    frame: true,
                    split: true,
                    columnsPerRow: 1,
                    padding: '0 0 0 0',
                    fieldDefaults: {
                        labelWidth: 70,
                        anchor: '100%',
                        margin: '3 3 3 3',
                        msgTarget: 'side'
                    },
                    fields: [
					{
					    xtype: 'ngText',
					    fieldLabel: '文件名称',
					    itemId: 'name',
                        value:'',
					    name: 'NodeText',
					    readOnly: false,
					    mustInput: true,
					    colspan: 1
					},
                    {
					    xtype: 'filefield',
					    buttonText: '...',
					    itemId: 'addr',
					    fieldLabel: '文件地址',
					    name: 'NodeAddr',
					    id: 'NodeAddr',
					    labelStyle : 'color:OrangeRed',
					    readOnly: false,
					    emptyText: '可输入文件类型exe/doc/docx/xls/xlsx/ppt/pptx',
					    mustInput: true,					    
					    colspan: 1,
					    validator: function (value) {
					        var arr = value.split('.');
					        var tp = false;
					        switch (arr[arr.length - 1].toLowerCase()) {
					            case 'exe':
					            case 'doc':
					            case 'docx':
					            case 'xls':
					            case 'xlsx':
					            case 'ppt':
					            case 'pptx': tp = true;
					        }
					        if (tp) {
					            var importDocWin = this.findParentByType('ngImportDocWin');
					            //if (importDocWin.queryById('name').value == '' || typeof (importDocWin.queryById('name').value) == 'undefined') {
					            if (importDocWin.queryById('name').value == '' ) {					                
					                var a = value.lastIndexOf('\\');					                
					                if (a == -1) {
					                    a = 0;
					                }
					                var b = value.lastIndexOf('.');
					                var defaultName = value.substring(a+1,b);
					                importDocWin.queryById('name').setValue(defaultName);
					                //editWin.queryById('name').setValue(custommenutreenode[0].data.text);
					                
					                //var f = document.getElementById('NodeAddr');
					                //var f = document.getElementById('NodeAddr-inputCell');
					                //var a = this.el.down('NodeAddr').dom;
					                //f.select();
					                //alert(document.selection.createRange().text);
					            }
					            return true;
					        }
					        var input = this.el.down('input').dom;
					        input.value = '可输入文件类型exe/doc/docx/xls/xlsx/ppt/pptx';
					        return "可输入文件类型exe/doc/docx/xls/xlsx/ppt/pptx";
					    },}
					, {
					    xtype: 'fieldset',					    
					    name: 'NodeEdit',
					    itemId: 'editContainer',
					    padding: '0,0,0,0',
					    layout:'column',
					    border: false,
                        //width:350,
					    items: [{
					        xtype: 'ngText',
					        itemId: 'edit',
					        fieldLabel: '文件编辑',
                            width:467,
					        readOnly: true,
					        mustInput: false,
					        colspan: 1,
					    }, {
					        xtype: 'button',
					        itemId: 'btn',
					        colspan: 1,
					        text: '...',
					        handler: function () {
					            var fatherWindow = this.findParentByType('window');
					            var editWin = Ext.create('Ext.ng.editParmWin', {
					                father: fatherWindow
					            });
					            var parm = fatherWindow.queryById('edit').value;
					            editWin.queryById('parmArea').setValue(parm);
					            //editWin.queryById('parmArea').focus(true,true);
					            editWin.show();
					        }
					    }]
					}]
                }],
                buttons: [
                    "->",
                    {
                        text: '保 存',
                        itemId: 'save',
                        handler: function () {
                            //var win = this.findParentByType('window');
                            //qurrybyid
                            var nodetext = this.findParentByType('ngImportDocWin').items.items[0].items.items[0].items.items[0].items.items[0].lastValue;
                            var nodeaddr = this.findParentByType('ngImportDocWin').queryById('addr').rawValue;
                            var nodeedit = this.findParentByType('ngImportDocWin').items.items[0].items.items[2].items.items[0].items.items[0].items.items[0].lastValue;
                            //nodeaddr = 'LocalSoft' + nodeaddr + '№,№';
                            while (nodetext == '' || nodetext == null) {
                                //alert('文件名称不能为空');
                                Ext.MessageBox.alert('提示', '文件名称不能为空');
                                return;
                            };
                            while (nodeaddr == '' || nodeaddr == null || nodeaddr == '可输入文件类型exe/doc/docx/xls/xlsx/ppt/pptx') {
                                //alert('文件地址不能为空');
                                Ext.MessageBox.alert('提示', '文件地址不能为空');
                                return;
                            };
                            //企业功能树菜单选择项
                            var selectedNode = custommenutree.getSelectionModel().getSelection()[0];
                            
                            if (this.findParentByType('ngImportDocWin').winType == 'add') {                                
                                if (selectedNode == null)
                                    selectedNode = custommenutree.getRootNode();
                                if (selectedNode.data.leaf == true) {
                                    selectedNode = selectedNode.parentNode;
                                }
                                //判断是否非按钮节点
                                if (!selectedNode.data.leaf) {
                                    var newChildNode = selectedNode.appendChild({
                                        id: guid(), //获取唯一值,
                                        //MenuType:2,
                                        text: nodetext,
                                        name: nodetext,
                                        url: nodeaddr,
                                        urlparm: nodeedit,
                                        pid: selectedNode.data.id,
                                        leaf: true,
                                        checked: false,
                                        originalcode: "",
                                        expanded: true
                                    });
                                }
                                else {
                                    Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                };
                            } else {
                                selectedNode.set('text', nodetext);
                                selectedNode.set('name', nodetext);
                                selectedNode.set('url', nodeaddr);
                                selectedNode.set('urlparm', nodeedit);                      
                            }                                               
                            this.findParentByType('ngImportDocWin').close();
                        }
                    },
                    {
                        text: '关 闭',
                        itemId: 'close',
                        handler: function () {
                            this.findParentByType('ngImportDocWin').close();
                        }
                    }
                ]
            });
            Ext.define("Ext.ng.importUrlWin", {
                extend: 'Ext.window.Window',
                alias: 'widget.ngImportUrlWin',
                title: "节点维护",
                modal: true,
                //width: 500,
                //height: 160,
                width: 600,
                height: 180,
                closeable: true,
                resizable: false,
                closeAction: "hide",
                winType: '',
                items: [
                {
                    xtype: 'ngTableLayoutForm',
                    //id: 'customMenuNodeTextForm',
                    frame: true,
                    split: true,
                    columnsPerRow: 1,
                    padding: '0 0 0 0',
                    fieldDefaults: {
                        labelWidth: 70,
                        anchor: '100%',
                        margin: '3 3 3 3',
                        msgTarget: 'side'
                    },
                    fields: [
					{
					    xtype: 'ngText',
					    fieldLabel: '链接名称',
					    itemId: 'name',
					    name: 'NodeText',
					    readOnly: false,
					    mustInput: true,
					    colspan: 1
					}, {
					    xtype: 'ngText',
					    itemId: 'addr',
					    fieldLabel: '链接地址',
					    labelStyle : 'color:OrangeRed',
					    name: 'NodeAddr',
					    readOnly: false,
					    mustInput: true,
					    colspan: 1
					}, {
					    xtype: 'fieldset',
					    name: 'NodeEdit',
					    itemId: 'editContainer',
					    padding: '0,0,0,0',
					    layout: 'column',
					    border: false,
					    colspan: 1,
					    items: [{
					        xtype: 'ngText',
					        itemId: 'edit',
					        fieldLabel: '链接编辑',
					        readOnly: true,
					        //width:387,
					        width: 467,
					        mustInput: false
					    }, {
					        xtype: 'button',
					        itemId: 'btn',
					        text: '...',
					        handler: function () {
					            var fatherWindow = this.findParentByType('window');
					            var editWin = Ext.create('Ext.ng.editParmWin', {
					                father: fatherWindow
					            });
					            var parm = fatherWindow.queryById('edit').value;
					            editWin.queryById('parmArea').setValue(parm);
					            //editWin.queryById('parmArea').focus(true,true);
					            editWin.show();
					        }
					    }]
					}
                    ]
                }
                ],
                buttons: [
                    "->",
                    {
                        text: '保 存',
                        itemId: 'save',
                        handler: function () {
                            //var win = this.findParentByType('window');
                            //qurrybyid
                            var nodetext = this.findParentByType('ngImportUrlWin').items.items[0].items.items[0].items.items[0].items.items[0].lastValue;
                            var nodeaddr = this.findParentByType('ngImportUrlWin').items.items[0].items.items[1].items.items[0].items.items[0].lastValue;
                            var nodeedit = this.findParentByType('ngImportUrlWin').items.items[0].items.items[2].items.items[0].items.items[0].items.items[0].lastValue;
                            //nodeaddr = 'WebBrowseIndividualManager№,№Caption№=№' + nodetext + '№,№Url№=№' + nodeaddr;
                            while (nodetext == '' || nodetext == null) {
                                Ext.MessageBox.alert('提示', '链接名称不能为空');
                                //alert('链接名称不能为空');
                                return;
                            };
                            while (nodeaddr == '' || nodeaddr == null) {
                                Ext.MessageBox.alert('提示', '链接地址不能为空');
                                //alert('链接地址不能为空');
                                return;
                            };
                            //企业功能树菜单选择项
                            var selectedNode = custommenutree.getSelectionModel().getSelection()[0];
                            
                            if (this.findParentByType('ngImportUrlWin').winType == 'add') {                                
                                if (selectedNode == null)
                                    selectedNode = custommenutree.getRootNode();
                                if (selectedNode.data.leaf == true) {
                                    selectedNode = selectedNode.parentNode;
                                }
                                //判断是否非按钮节点
                                if (!selectedNode.data.leaf) {
                                    var newChildNode = selectedNode.appendChild({
                                        id: guid(), //获取唯一值,
                                        //MenuType:2,
                                        text: nodetext,
                                        name: nodetext,
                                        url: nodeaddr,
                                        urlparm: nodeedit,
                                        pid: selectedNode.data.id,
                                        leaf: true,
                                        checked: false,
                                        originalcode: "",
                                        expanded: true
                                    });
                                }
                                else {
                                    Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                };
                            } else {
                                selectedNode.set('text', nodetext);
                                selectedNode.set('name', nodetext);
                                selectedNode.set('url', nodeaddr);
                                selectedNode.set('urlparm', nodeedit);
                            }
                            this.findParentByType('ngImportUrlWin').close();
                        }
                    },
                    {
                        text: '关 闭',
                        itemId: 'close',
                        handler: function () {
                            this.findParentByType('ngImportUrlWin').close();
                        }
                    }
                ]
            });
           //弹出winform时沉默页面
            StoreloadMarsk = new Ext.LoadMask(document.body, {
                msg: '导入文件',
                disabled: false
            });

            var customEditToolbar = new Ext.panel.Panel({
                region: 'north',
                height: 30,
                border: false,
                style: 'margin-top:1px;margin-bottom:1px',
                bodyStyle: "background-color:transparent",
                ////#dfe8f6
                //items: [{
                //    layout: {
                //        type: 'hbox',
                //        padding: '0',
                //        pack: 'start',
                //        align: 'middle'
                //    },
                //    border: false,
                //    defaults: { margins: '0 5 0 0' },
                //    bodyStyle: "background-color:transparent", //#dfe8f6
                //    items: [{
                //        xtype: 'toolbar', text: '我的功能树',
                //        items: [{
                //            width: 180,
                //            xtype: 'textfield',
                //            itemId: 'queryKey',
                //            name: 'queryKey',
                //            emptyText: '定位节点',
                //            enableKeyEvents: true,
                //            listeners: {
                //                'keydown': function (el, e, eOpts) {
                //                    if (e.getKey() == e.ENTER) {
                //                        var toolbar = this.findParentByType('toolbar');//找到根节点
                //                        var condition = toolbar.items.items[0].value;
                //                        if (condition == '' || condition == null) {
                //                            //alert('请输入定位关键字');
                //                            return;
                //                        }
                //                        findNodeByFuzzy(custommenutree, condition);
                //                        return false;
                //                    }
                //                }
                //            }
                //        }, '->', {
                //            text: '定位',
                //            //tooltip: '定位',
                //            itemId: 'query',
                //            iconCls: 'icon-Location',
                //            handler: function () {
                //                var toolbar = this.findParentByType('toolbar');//找到根节点
                //                var condition = toolbar.items.items[0].value;
                //                findNodeByFuzzy(custommenutree, condition);
                //            }
                //        }, {
                //            text: '导入文件',
                //            iconCls: 'icon-Import',
                //            itemId: 'importTxt',
                //            handler: function () {
                //                Ext.create("Ext.ng.importDocWin", {
                //                    title: '导入文件',
                //                    winType:'add'
                //                }).show();
                //            }
                //        }, {
                //            text: '导入网址',
                //            iconCls: 'icon-Import',
                //            itemId: 'importUrl',
                //            handler: function () {
                //                var importUrlWin = Ext.create("Ext.ng.importUrlWin", {
                //                    title: '导入网址',
                //                    winType: 'add'
                //                });
                //                importUrlWin.queryById('addr').setValue('http://');
                //                importUrlWin.show();
                //            }
                //        },{
                //            text: '编辑',
                //            iconCls: 'cog_edit',
                //            itemId: 'edit',
                //            hidden:true,
                //            handler: function () {
                //                var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                //                var arr = custommenutreenode[0].raw.url.split('.');
                //                var tp = false;
                //                switch (arr[arr.length - 1].toLowerCase()) {
                //                    case 'exe':
                //                    case 'doc':
                //                    case 'docx':
                //                    case 'xls':
                //                    case 'xlsx':
                //                    case 'ppt':
                //                    case 'pptx': tp = true;
                //                }
                //                if (tp == true) {                                   
                //                    var editWin = Ext.create("Ext.ng.importDocWin", {
                //                        title: '编辑文件',
                //                        winType: 'edit',
                //                        editFileField: custommenutreenode[0].data.url
                //                    });                                    
                //                    //editWin.queryById('addr').setValue(custommenutreenode[0].raw.url);
                //                    editWin.queryById('addr').on('afterrender', function (fileField) {
                //                        var input = editWin.queryById('addr').el.down('input').dom;
                //                        input.value = custommenutreenode[0].data.url;
                //                    });
                //                    editWin.queryById('name').setValue(custommenutreenode[0].data.text);
                //                    editWin.queryById('edit').setValue(custommenutreenode[0].data.urlparm);
                //                } else {
                //                    var editWin = Ext.create("Ext.ng.importUrlWin", {
                //                        title: '编辑网址',
                //                        winType: 'edit'
                //                    });
                //                    editWin.queryById('name').setValue(custommenutreenode[0].data.text);
                //                    editWin.queryById('addr').setValue(custommenutreenode[0].data.url);
                //                    editWin.queryById('edit').setValue(custommenutreenode[0].data.urlparm);
                //                }  
                //                editWin.show();
                //            }
                //        }]
                //    }]
                //}]

                ////#dfe8f6
                items: [{                    
                    items: [{
                        xtype: 'toolbar', text: '我的功能树',
                        items: [{
                            width: 180,
                            xtype: 'textfield',
                            itemId: 'queryKey',
                            name: 'queryKey',
                            emptyText: '定位节点',
                            enableKeyEvents: true,
                            listeners: {
                                'keydown': function (el, e, eOpts) {
                                    if (e.getKey() == e.ENTER) {
                                        var toolbar = this.findParentByType('toolbar');//找到根节点
                                        var condition = toolbar.items.items[0].value;
                                        if (condition == '' || condition == null) {
                                            alert('请输入定位关键字');
                                            return;
                                        }
                                        findNodeByFuzzy(custommenutree, condition);
                                        return false;
                                    }
                                }
                            }
                        },  {
                            text: '定位',
                            tooltip: '定位',
                            itemId: 'query',
                            iconCls: 'icon-Location',
                            handler: function () {
                                var toolbar = this.findParentByType('toolbar');//找到根节点
                                var condition = toolbar.items.items[0].value;
                                findNodeByFuzzy(custommenutree, condition);
                            }
                        }, '->', {
                            text: '导入文件',
                            iconCls: 'icon-Import',
                            itemId: 'importTxt',
                            hidden: isWeb,
                            handler: function () {
                                //Ext.create("Ext.ng.importDocWin", {
                                //    title: '导入文件',
                                //    winType:'add'
                                //}).show();
                                //var e = window.event;
                                //e.stopEvent(); 
                                StoreloadMarsk.show();
                                window.external.UploadProgramme('', '', '','add');
                                //stopEvent();
                                //alert(s);
                            }
                        }, {
                            text: '导入网址',
                            hidden: isWeb,
                            iconCls: 'icon-Import',
                            itemId: 'importUrl',
                            handler: function () {
                                //var importUrlWin = Ext.create("Ext.ng.importUrlWin", {
                                //    title: '导入网址',
                                //    winType: 'add'
                                //});
                                //importUrlWin.queryById('addr').setValue('http://');
                                //importUrlWin.show();
                                StoreloadMarsk.show();
                                window.external.UploadWebsite('', '', '', 'add');
                            }
                        },{
                            text: '编辑',
                            iconCls: 'cog_edit',
                            itemId: 'edit',
                            hidden:true,
                            handler: function () {
                                var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                                var arr = custommenutreenode[0].raw.url.split('.');
                                var tp = false;
                                switch (arr[arr.length - 1].toLowerCase()) {
                                    case 'exe':
                                    case 'doc':
                                    case 'docx':
                                    case 'xls':
                                    case 'xlsx':
                                    case 'ppt':
                                    case 'pptx': tp = true;
                                }
                                if (tp == true) {                                   
                                    //var editWin = Ext.create("Ext.ng.importDocWin", {
                                    //    title: '编辑文件',
                                    //    winType: 'edit',
                                    //    editFileField: custommenutreenode[0].data.url
                                    //});                                    
                                    //editWin.queryById('addr').setValue(custommenutreenode[0].raw.url);
                                    //editWin.queryById('addr').on('afterrender', function (fileField) {
                                    //    var input = editWin.queryById('addr').el.down('input').dom;
                                    //    input.value = custommenutreenode[0].data.url;
                                    //});
                                    //editWin.queryById('name').setValue(custommenutreenode[0].data.text);
                                    //editWin.queryById('edit').setValue(custommenutreenode[0].data.urlparm);
                                    StoreloadMarsk.show();
                                    window.external.UploadProgramme(custommenutreenode[0].data.text, custommenutreenode[0].data.url, custommenutreenode[0].data.urlparm,'edit');
                                } else {
                                    //var editWin = Ext.create("Ext.ng.importUrlWin", {
                                    //    title: '编辑网址',
                                    //    winType: 'edit'
                                    //});
                                    //editWin.queryById('name').setValue(custommenutreenode[0].data.text);
                                    //editWin.queryById('addr').setValue(custommenutreenode[0].data.url);
                                    //editWin.queryById('edit').setValue(custommenutreenode[0].data.urlparm);
                                    StoreloadMarsk.show();
                                    window.external.UploadWebsite(custommenutreenode[0].data.text, custommenutreenode[0].data.url, custommenutreenode[0].data.urlparm, 'edit');
                                }
                                //editWin.show();
                            }
                        }]
                    }]
                }]
            });

            function stopEvent(evt) {
                var evt = evt || window.event;
                if (evt.preventDefault) {
                    evt.preventDefault();
                    evt.stopPropagation();
                } else {
                    evt.returnValue = false;
                    evt.cancelBubble = true;
                }
            }

            //定位节点函数
            function findNodeByFuzzy(tree, value) {
                if (value == "") { return; }
                var me = tree, index = -1;
                var firstFind = false;
                if (isNaN(me.nodeIndex) || me.nodeIndex == null || me.value != value) {
                    me.nodeIndex = -1;
                    me.value = value;
                }
                var findNode = tree.getRootNode().findChildBy(function (node) {
                    index++;
                    //if (!node.data.root && index > me.nodeIndex && (node.data.text.indexOf(value) > -1 || node.data.bopomofo.indexOf(value.toUpperCase()) > -1)) {
                    if (!node.data.root && index > me.nodeIndex && (node.data.text.indexOf(value) > -1)) {
                        return true;
                    }
                }, null, true);
                me.nodeIndex = index;
                if (findNode) {
                    tree.selectPath(findNode.getPath());
                }
                else {
                    if (firstFind) {
                        Ext.MessageBox.alert('', '没有匹配的树节点.');
                    }
                    me.nodeIndex = -1;
                }
            };
            //右键菜单
            var contextMenu1 = new Ext.menu.Menu({
                items: [
                    {
                        text: '全选',
                        handler: function () {
                            treeNodeCheckBoxSelected(custommenutreestore.getRootNode(), true);
                        }
                    },
                    {
                        text: '反选',
                        handler: function () {
                            treeNodeCheckBoxSelected(custommenutreestore.getRootNode(), false);
                        }
                    }, '-',
                    {
                        text: '增加同级节点',
                        handler: function () {
                            //企业功能树菜单选择项
                            var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                            //判断是否非按钮节点
                            if (custommenutreenode.length == 0 || (custommenutreenode.length > 0 && custommenutreenode[0].data.leaf)) {
                                Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                return;
                            }
                            contextMenuOpType = "samelevel";
                            customMenuNodeTextWin.setTitle("增加同级节点");
                            customMenuNodeTextWin.show();
                        }
                    },
                    {
                        text: '增加下级节点',
                        handler: function () {
                            //企业功能树菜单选择项
                            var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                            //判断是否非按钮节点
                            if (custommenutreenode.length == 0 || (custommenutreenode.length > 0 && custommenutreenode[0].data.leaf)) {
                                Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                return;
                            }
                            contextMenuOpType = "lowerlevel";
                            customMenuNodeTextWin.setTitle("增加下级节点");
                            customMenuNodeTextWin.show();
                        }
                    },
                    {
                        text: '重命名',
                        handler: function () {
                            contextMenuOpType = "rename";
                            customMenuNodeTextWin.setTitle("重命名");
                            customMenuNodeTextWin.show();
                        }
                    }
                ]
            });
            var contextMenu2 = new Ext.menu.Menu({
                items: [
                    {
                        text: '全选',
                        handler: function () {
                            treeNodeCheckBoxSelected(custommenutreestore.getRootNode(), true);
                        }
                    },
                    {
                        text: '反选',
                        handler: function () {
                            treeNodeCheckBoxSelected(custommenutreestore.getRootNode(), false);
                        }
                    }, '-',
                    {
                        text: '增加节点',
                        handler: function () {
                            ////企业功能树菜单选择项
                            //var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                            ////判断是否非按钮节点
                            //if (custommenutreenode.length == 0 || (custommenutreenode.length > 0 && custommenutreenode[0].data.leaf)) {
                            //    Ext.MessageBox.alert('提示', '请选择菜单节点！');
                            //    return;
                            //}
                            contextMenuOpType = "rootlevel";
                            customMenuNodeTextWin.setTitle("增加节点");
                            customMenuNodeTextWin.show();
                        }
                    }
                ]
            });

            //自定义功能树
            var custommenutreestore = Ext.create('Ext.data.TreeStore', {
                autoLoad: false,
                proxy: {
                    type: 'ajax',
                    idProperty: 'id',
                    url: C_ROOT + 'SUP/MyFuncTree/LoadMyFuncTree',

                },
                //                                folderSort: true,
                fields: [{ name: 'text', type: 'string' },
                    //{ name: 'customsort', type: 'string' },
                    { name: 'phid', type: 'int' },
                    { name: 'originalcode', type: 'string' },
                    { name: 'name', type: 'string' },
                { name: 'originalid', type: 'string' },
                { name: 'pid', type: 'string' },
                { name: 'url', type: 'string' },
                { name: 'userid', type: 'int' },
                { name: 'urlparm', type: 'string' },
                { name: 'checked', type: 'boolean', values: false }],


            });

            custommenutree = Ext.create('Ext.tree.Panel', {
                region: 'center',
                store: custommenutreestore,
                editToolbar:customEditToolbar,
                rootVisible: false,
                listeners: {
                    'afterrender': function () {
                        //this.expandAll();
                    },
                    //点击到含有originalcode的节点，是原有节点，不可编辑，隐藏上方toolbar编辑按钮
                    'itemclick': function (view, rcd, item, idx, event, eOpts) {
                        var selectedNode = custommenutree.getSelectionModel().getSelection()[0];
                        if (selectedNode.raw.originalcode != '' || selectedNode.raw.leaf == false) {
                            this.editToolbar.queryById('edit').hide();
                        } else {
                            this.editToolbar.queryById('edit').show();
                        }
                    },
                    'itemdblclick': function (view, rcd, item, idx, event, eOpts) {
                    },
                    'checkchange': function (node, checked) {
                        setChildNodeChecked(node, checked); //同时选择下级
                    },
                    'itemcontextmenu': function (view, rec, node, index, e) {
                        e.stopEvent();
                        contextMenu1.showAt(e.getXY());
                        return false;
                    },
                    'containercontextmenu': function (treeP, e, eOpts) {
                        e.stopEvent();
                        contextMenu2.showAt(e.getXY());
                        return false;
                    }},
                //viewConfig: {
                //    plugins: {
                //        ptype: 'treeviewdragdrop' //拖动节点
                //    }, listeners: {
                //        beforedrop: function (nodeEl, data, overModel) {
                //            //alert('beforedrop');
                //        },
                //        drop: function (node, data, overModel, dropPostion, eOpts) {
                //        }
                //    }
                //}
            });

            var customMenuNodeTextWin = Ext.create("Ext.window.Window", {
                title: "节点维护",
                modal: true,
                width: 350,
                height: 100,
                closeable: true,
                resizable: false,
                closeAction: "hide",
                items: [
                {
                    xtype: 'ngTableLayoutForm',
                    id: 'customMenuNodeTextForm',
                    frame: true,
                    split: true,
                    //buskey: 'PhId', //对应的业务表主键属性
                    //otype: 'add', //操作类型,add||edit||view
                    columnsPerRow: 1,
                    padding: '0 5 0 5',
                    fieldDefaults: {
                        labelWidth: 70,
                        anchor: '100%',
                        margin: '0 -30 5 5',
                        msgTarget: 'side'
                    },
                    fields: [
					{
					    xtype: 'ngText',
					    fieldLabel: '菜单名称',
					    name: 'NodeText',
					    id: 'NodeText',
					    labelStyle: 'color:OrangeRed',
					    readOnly: false,
					    //mustInput: true,
					    colspan: 1
					}
                    ]
                }
                ],
                buttons: [
                    "->",
                    {
                        text: '保 存',
                        handler: function () {
                            var nodetext = Ext.getCmp("NodeText").value;
                            while (nodetext == '' || nodetext == null) {
                                Ext.MessageBox.alert('提示' ,'节点名不能为空');
                                return;
                            }
                            switch (contextMenuOpType) {
                                case "rootlevel":
                                        var selectedNode = custommenutree.getRootNode();
                                        var newChildNode = selectedNode.appendChild({
                                            id: guid(), //获取唯一值,
                                            text: nodetext,
                                            name: nodetext,
                                            pid: selectedNode.data.id,
                                            leaf: false,
                                            checked: false,
                                            //Suite: customsuitecmb.value,
                                            originalcode: selectedNode.raw.code,
                                            children:[],
                                            childNodes: null,
                                            //expandable: true,
                                            expanded:true
                                        });
                                        //newChildNode.set('childNodes', null);
                                        //newChildNode.select('childNodes', null);
                                    break;
                                case "samelevel":
                                    //企业功能树菜单选择项
                                    var selcustommenutree = custommenutree.getSelectionModel().getSelection();
                                    //判断是否非按钮节点
                                    if (selcustommenutree.length > 0 && !selcustommenutree[0].data.leaf) {
                                        var nodeid = selcustommenutree[0].get("id");
                                        var selectedNode = custommenutreestore.getNodeById(nodeid);
                                        var selectedParentNode = selectedNode.parentNode;
                                        var newChildNode = selectedParentNode.appendChild({
                                            id: guid(), //获取唯一值,
                                            //MenuType:2,
                                            text: nodetext,
                                            name: nodetext,
                                            pid: selectedParentNode.data.id,
                                            leaf: false,
                                            checked: false,
                                            //Suite: customsuitecmb.value,
                                            originalcode: "",
                                            expanded: true
                                            //CSuite: "",
                                            //CModuleNo: "",
                                            //CRightKey: "0",
                                            //NoRightControl: "0"
                                        });
                                    }
                                    else {
                                        Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                        return;
                                    }
                                    break;
                                case "lowerlevel":
                                    //企业功能树菜单选择项
                                    var selcustommenutree = custommenutree.getSelectionModel().getSelection();
                                    //判断是否非按钮节点
                                    if (selcustommenutree.length > 0 && !selcustommenutree[0].data.leaf) {
                                        var nodeid = selcustommenutree[0].get("id");
                                        var selectedNode = custommenutreestore.getNodeById(nodeid);
                                        //新增-下级节点（appendChild和insertBefore的区别）
                                        selectedNode.data.leaf = false;
                                        var newChildNode = selectedNode.appendChild({
                                            id: guid(), //获取唯一值,
                                            text: nodetext,
                                            name: nodetext,
                                            pid: nodeid,
                                            leaf: false,
                                            checked: false,
                                            //Suite: customsuitecmb.value,
                                            originalcode: "",
                                            expanded: true
                                            //CSuite: "",
                                            //CModuleNo: "",
                                            //CRightKey: "0",
                                            //CMenuSign: "1",
                                            //NoRightControl: "0"
                                        });
                                    }
                                    else {
                                        Ext.MessageBox.alert('提示', '请选择菜单节点！');
                                        return;
                                    }
                                    break;
                                case "rename":
                                    var selcustommenutree = custommenutree.getSelectionModel().getSelection();
                                    if (selcustommenutree.length > 0) {
                                        var nodeid = selcustommenutree[0].get("id");
                                        var selectedNode = custommenutreestore.getNodeById(nodeid);
                                        selectedNode.set('text', nodetext);
                                        selectedNode.set('name', nodetext);
                                        selectedNode.commit();
                                    }
                                    break;
                            }
                            Ext.getCmp("NodeText").setValue('');
                            customMenuNodeTextWin.close();
                        }
                    },
                    {
                        text: '关 闭',
                        handler: function () {
                            Ext.getCmp("NodeText").setValue('');
                            customMenuNodeTextWin.close();
                        }
                    }
                ]
            });

            //自定义功能树panel
            var custommenupnl = Ext.create('Ext.panel.Panel', {
                region: 'center',
                style: 'margin-left:2px;margin-right:2px',
                //title: '企业功能树菜单',
                layout: 'border',
                border: 0,
                items: [
                    customEditToolbar,
                    custommenutree]
            });

            //布局
            var viewport = Ext.create('Ext.container.Viewport', {
                id: "viewPort",
                layout: 'border',
                items: [
                  ngToolbar,
                 //  sysmenupnl,
                 //   choosecenterform,
                 //custommenupnl
                {
                    id: 'myPanel',
                    xtype: 'panel',
                    //height: 500,
                    //width: 600,
                    region: 'center',
                    //autoScroll: true,
                    layout: 'border',
                    //style: 'overflow-y:scroll,padding-right:20px',
                    bodyStyle: "padding-right:5px",
                    items: [
                        sysmenupnl,
                        choosecenterform,
                        custommenupnl,
                        changeSeqForm
                    ]
                }
                ]
            });

           //


            ngToolbar.get('save').on('click', function () {
                //判断自定义套件有没有选择
                //if (customsuitecmb.value == null) {
                //    Ext.MessageBox.alert('提示', '请选择自定义套件！');
                //    return;
                //}

                //重置Seq
                var rootNode = custommenutree.getRootNode();
                SetCustomTreeSeq(rootNode);
                //获取所有节点数据
                var updateR = custommenutreestore.getUpdatedRecords();
                //格式化

                for (var i = 0; i < updateR.length; i++) {
                    delete updateR[i].data.allowDrag;
                    delete updateR[i].data.allowDrop;
                    delete updateR[i].data.children;
                }

                var custommenutreeData = GetDatatableData(updateR, [], [], [], 'PhId');
                //alert(JSON.stringify(data));
                var myFuncTree = Ext.JSON.encode(custommenutreeData);
                Ext.Ajax.request({
                    params: {
                        'myFuncTree': myFuncTree,
                        //'userid':userid 
                        //用户id作为属性传进来
                        //'suite': customsuitecmb.value
                    },
                    url: C_ROOT + 'SUP/MyFuncTree/Save',
                    async: false, //同步
                    success: function (response) {
                        if (response.responseText == '' || response.responseText == null) {
                            Ext.MessageBox.alert('提示', '保存失败');
                            return;
                        }
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.status === "ok") {
                            Ext.MessageBox.alert('提示', "保存成功", function () {
                                resetTreeState(custommenutreestore.getRootNode()); //清树状态
                                if (window.external.IsInWebBrowser != undefined) {
                                    window.external.RefreshFuncTree();
                                }
                            });
                        } else {
                            Ext.MessageBox.alert('提示', resp.messsage);
                        }
                    }
                });
            });

            //判断根root下是否存在node
            function isNodeExist(node, root) {
                if (node.raw.exist) {
                    return;
                }
                //console.info('isNodeRepeat');
                if (node.raw.code == root.raw.originalcode) {
                    node.raw.exist = true;//js
                    //myflag = true;
                }
                else {
                    if (root.hasChildNodes()) {
                        root.eachChild(function (child) {
                            isNodeExist(node, child)
                        });
                    }
                }
                //return flag;
            }
            //关闭
            //ngToolbar.get('close').on('click', function () {
            //    var top = window.parent;
            //    top.CloseTab('6');
           //})

            //右移
            choosecenterform.items.get('rightmove').on('click', function () {
                var pNodeData = [];
                var checkNodes = currentTree.getView().getChecked();
                if (checkNodes.length == 0) {
                    Ext.MessageBox.alert('提示', '请选择系统节点！');
                    return;
                }

                var root = custommenutree.getRootNode();
                var someNodeExist = false;

                Ext.Array.each(checkNodes, function (node1) {
                    //if (node1.raw.id == 'root') {
                    //    return true;
                    //}
                    var exist = false;
                    //判断被选中节点中有没有当前节点的父节点
                    node1.raw.fatherId = false;
                    node1.raw.exist = false;
                    Ext.Array.each(checkNodes, function (node2) {
                        if (node1.data.parentId == node2.data.id) {
                            node1.raw.fatherId = true;
                        }
                    });

                    //判断树中是否已存在node节点
                    Ext.Array.each(root, function (node3) {
                        if (node1.raw.exist != true) {
                            isNodeExist(node1, node3);
                        }
                    });

                    if (node1.raw.exist == true ) {
                        exist = true;
                        node1.set('checked', false);
                    }

                    if (!exist) {
                        pNodeData.push({ text: node1.data.text, id: node1.data.id, fatherId: node1.raw.fatherId, pid: (node1.parentNode == null)?'':node1.parentNode.id });
                    } else {
                        someNodeExist = true;
                    }
                });
                if (someNodeExist == true) {
                    Ext.MessageBox.alert('提示', '某些节点已存在，已从选中节点中排除');
                    //alert('某些节点已存在，已从选中节点中排除');
                }

                if (pNodeData.length == 0) return;
                //我的功能树菜单选择项
                var custommenutreenode = custommenutree.getSelectionModel().getSelection();
                //var custommenutreenode = custommenutree.getView().getChecked();
                //判断是否非按钮节点
                if (custommenutreenode.length > 0 && custommenutreenode[0].data.leaf) {
                    Ext.MessageBox.alert('提示', '请选择非叶子节点！');
                    //Ext.MessageBox.alert('提示', '请选择非叶子节点！');
                    return;
                }

                for (var i = 0; i < pNodeData.length; i++) {
                    //如果该节点的父节点在被选中节点内，不必在此添加该节点
                    if (pNodeData[i].fatherId == true) {
                        //var selectedSysNode = currentTree.getStore().getNodeById(pNodeData[i].id);
                        //AddSystemMenuToCustomMenu(pNodeData[i].pid, selectedSysNode)
                    }
                    else
                    if (custommenutreenode == null || custommenutreenode.length == 0) {
                        //没选择我的功能树菜单节点，在根目录添加
                        var rootNode = custommenutree.getRootNode();
                        var selectedSysNode = currentTree.getStore().getNodeById(pNodeData[i].id);
                        AddSystemMenuToCustomMenu(rootNode.data.id, selectedSysNode)
                    }
                    else {
                        //选择菜单节点[非按钮节点]
                        var selectedSysNode = currentTree.getStore().getNodeById(pNodeData[i].id);
                        AddSystemMenuToCustomMenu(custommenutreenode[0].data.id, selectedSysNode)
                    }
                }

            });

            //左移
            choosecenterform.items.get('leftmove').on('click', function () {
                var checkNodes = custommenutree.getView().getChecked(); //选择的企业功能树菜单
                Ext.Array.each(checkNodes, function (node) {
                    var pNode = node.parentNode;
                    if (pNode == null) {
                        return;
                    }
                    node.remove();
                    var I = pNode.childNodes.length;
                    if (I == 0) {
                        pNode.leaf = true; //置为叶子节点
                    }
                });
            });

           //上移
            changeSeqForm.items.get('upmove').on('click', function () {
                var selectNodes = custommenutree.selModel.selected.items[0]; //选择的企业功能树菜单
                var parentNodes = custommenutree.selModel.selected.items[0].parentNode;
                var index = parentNodes.childNodes.indexOf(selectNodes);
                if (index > 0) {
                    var priviousNode = parentNodes.childNodes[index - 1];
                    parentNodes.insertChild(index + 1, priviousNode);
                    //parentNodes.childNodes[index - 1] = selectNodes;
                    //parentNodes.childNodes[index] = priviousNode;
                    //RefreshForm(true);
                }
            });

           //下移
            changeSeqForm.items.get('downmove').on('click', function () {
                //var pNode = custommenutree.selModel.selected.items[0].parentNode;
                //var dropIndex = childNodeIndex + 1;
                //pNode.insertChild(dropIndex, record);

                var selectNodes = custommenutree.selModel.selected.items[0]; //选择的企业功能树菜单
                var parentNodes = custommenutree.selModel.selected.items[0].parentNode;
                var index = parentNodes.childNodes.indexOf(selectNodes);
                parentNodes.insertChild(index + 2, selectNodes);
            });




            //重置自定义功能树的Seq
            function SetCustomTreeSeq(node) {
                var childnodes = node.childNodes;
                for (var i = 0; i < childnodes.length; i++) {
                    childnodes[i].data.Seq = i;
                    childnodes[i].dirty = true; //发生变化

                    if (childnodes[i].childNodes.length > 0) {
                        SetCustomTreeSeq(childnodes[i]);
                    }
                }
            }

            //自定义功能树加载节点
            function AddSystemMenuToCustomMenu(pNodeId, node) {
                var customPNode = custommenutreestore.getNodeById(pNodeId);
                var nodeguid = guid(); //获取唯一值
                customPNode.appendChild({
                    id: nodeguid,
                    text: node.data.text,
                    leaf: node.data.leaf,
                    checked: false,
                    //Suite: customsuitecmb.value,
                    urlparm: null,
                    originalcode: node.raw.code,
                    //MenuType: 2,
                    name: node.data.text,
                    pid: pNodeId,
                    url:node.raw.url
                });
                node.set('checked', false);
                var customNode = custommenutreestore.getNodeById(nodeguid);

                var childnodes = node.childNodes;
                for (var i = 0; i < childnodes.length; i++) {
                    if (childnodes[i].data.checked) {
                        AddSystemMenuToCustomMenu(customNode.data.id, childnodes[i]);
                    }
                }
            }

            
            
       });
       //生成唯一值
       function S4() {
           return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
       }
       function guid() {
           return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
       }

       
       function UploadProgrammeCallback(btnFlag,name, addr, pram, winType)
       {
           //var win = this.findParentByType('window');
           //qurrybyid
           //var nodetext = this.findParentByType('ngImportDocWin').items.items[0].items.items[0].items.items[0].items.items[0].lastValue;
           //var nodeaddr = this.findParentByType('ngImportDocWin').queryById('addr').rawValue;
           //var nodeedit = this.findParentByType('ngImportDocWin').items.items[0].items.items[2].items.items[0].items.items[0].items.items[0].lastValue;

           if (btnFlag != 'True') {
               StoreloadMarsk.hide();
               return;
           }
           var nodetext = name;
           //var nodeaddr = unescape(addr);
           var nodeaddr = decodeURIComponent(addr);
           var nodeedit = pram;

           //企业功能树菜单选择项
           var selectedNode = custommenutree.getSelectionModel().getSelection()[0];

           if (winType == 'add') {
               if (selectedNode == null)
                   selectedNode = custommenutree.getRootNode();
               if (selectedNode.data.leaf == true) {
                   selectedNode = selectedNode.parentNode;
               }
               //判断是否非按钮节点
               if (!selectedNode.data.leaf) {
                   var newChildNode = selectedNode.appendChild({
                       id: guid(), //获取唯一值,
                       //MenuType:2,
                       text: nodetext,
                       name: nodetext,
                       url: nodeaddr,
                       urlparm: nodeedit,
                       pid: selectedNode.data.id,
                       leaf: true,
                       checked: false,
                       originalcode: "",
                       expanded: true
                   });
               }
               else {
                   Ext.MessageBox.alert('提示', '请选择菜单节点！');
               };
           } else {
               selectedNode.set('text', nodetext);
               selectedNode.set('name', nodetext);
               selectedNode.set('url', nodeaddr);
               selectedNode.set('urlparm', nodeedit);
           }
           StoreloadMarsk.hide();
       }

       function UploadWebsiteCallback(btnFlag, name, addr, pram, winType) {
           //var win = this.findParentByType('window');
           //qurrybyid
           //var nodetext = this.findParentByType('ngImportDocWin').items.items[0].items.items[0].items.items[0].items.items[0].lastValue;
           //var nodeaddr = this.findParentByType('ngImportDocWin').queryById('addr').rawValue;
           //var nodeedit = this.findParentByType('ngImportDocWin').items.items[0].items.items[2].items.items[0].items.items[0].items.items[0].lastValue;

           if (btnFlag != 'True') {
               StoreloadMarsk.hide();
               return;
           }
           var nodetext = name;
           //var nodeaddr = unescape(addr);
           var nodeaddr = addr;
           var nodeedit = pram;

           //企业功能树菜单选择项
           var selectedNode = custommenutree.getSelectionModel().getSelection()[0];

           if (winType == 'add') {
               if (selectedNode == null)
                   selectedNode = custommenutree.getRootNode();
               if (selectedNode.data.leaf == true) {
                   selectedNode = selectedNode.parentNode;
               }
               //判断是否非按钮节点
               if (!selectedNode.data.leaf) {
                   var newChildNode = selectedNode.appendChild({
                       id: guid(), //获取唯一值,
                       //MenuType:2,
                       text: nodetext,
                       name: nodetext,
                       url: nodeaddr,
                       urlparm: nodeedit,
                       pid: selectedNode.data.id,
                       leaf: true,
                       checked: false,
                       originalcode: "",
                       expanded: true
                   });
               }
               else {
                   Ext.MessageBox.alert('提示', '请选择菜单节点！');
               };
           } else {
               selectedNode.set('text', nodetext);
               selectedNode.set('name', nodetext);
               selectedNode.set('url', nodeaddr);
               selectedNode.set('urlparm', nodeedit);
           }
           StoreloadMarsk.hide();
       }
             
</script>


}
