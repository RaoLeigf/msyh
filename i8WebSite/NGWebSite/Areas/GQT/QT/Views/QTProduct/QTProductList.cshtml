@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Script
{ 
    <script src=@Url.Script("~/NG3Resource/IndividualInfo/GQT/QT/QTProductEdit.js") type="text/javascript" charset="utf-8"></script>
    <script type="text/javascript">
        //多语言，在Controller调用base.InitialMultiLanguage(busType)方法获取
        var langinfo = Ext.htmlDecode("@ViewBag.NG3Lang");
        var Lang = (!langinfo || Ext.isEmpty(langinfo)) ? {} : JSON.parse(langinfo);

        //从viewBag获取自定义信息，在Controller调用base.GetIndividualUI(busType)方法获取
        var defCustomInfo = Ext.htmlDecode('@ViewBag.IndividualInfo');
        if (Ext.isEmpty(defCustomInfo)) {
            //数据库没有，取js模板的individualConfigInfo
            defCustomInfo = individualConfigInfo;
        }

        //自定义信息与多语言合并
        var individualInfo = $DealIndividualInfo(defCustomInfo, Lang);
    </script>
    <script type="text/javascript">
	    var pageName = '@ViewBag.Title';
        var store;//Grid数据源

        Ext.onReady(function () {

            //工具栏
            var ngToolbar = Ext.create('Ext.ng.Toolbar', {
                region: 'north',
                //rightName: '', //权限名称
                ngbuttons: [
                    'add', 'edit', 'delete', 'view', 
					{ id: "TB", text: "同步账号", width: this.itemWidth },
                    '->', 'close'
                ]
            });

			var fields = [
  {
    "name": "PhId",
    "type": "string",
    "mapping": "PhId"
  },
  {
    "name": "ProductBZ",
    "type": "string",
    "mapping": "ProductBZ"
  },
  {
    "name": "ProductName",
    "type": "string",
    "mapping": "ProductName"
  },
  {
    "name": "ProductUrl",
    "type": "string",
    "mapping": "ProductUrl"
  },
  {
    "name": "BZ",
    "type": "string",
    "mapping": "BZ"
  },

{
    "name": "FSqlType",
    "type": "string",
    "mapping": "FSqlType"
},
{
    "name": "FSqlServer",
    "type": "string",
    "mapping": "FSqlServer"
},
{
    "name": "FSqlSource",
    "type": "string",
    "mapping": "FSqlSource"
},
{
    "name": "FSqlDataName",
    "type": "string",
    "mapping": "FSqlDataName"
},
{
    "name": "FSqlDataPwd",
    "type": "string",
    "mapping": "FSqlDataPwd"
},
{
    "name": "FSqlUserTable",
    "type": "string",
    "mapping": "FSqlUserTable"
},
{
    "name": "FSqlUserTableCode",
    "type": "string",
    "mapping": "FSqlUserTableCode"
},
{
    "name": "FSqlUserTablePwd",
    "type": "string",
    "mapping": "FSqlUserTablePwd"
},


  {
    "name": "NgRecordVer",
    "type": "int",
    "mapping": "NgRecordVer"
  }
];
			var modelFileds = $MergIndividualModelCol(fields, individualInfo, 'QTProduct');//合并model

			//定义模型
			Ext.define('model', {
				extend: 'Ext.data.Model',
				fields: modelFileds
			});          

            store = Ext.create('Ext.ng.JsonStore', {
                model: 'model',
                pageSize: 25,
				autoLoad: true,
                url: C_ROOT + 'GQT/QT/QTProduct/GetQTProductList'
            });

            var pagingbar = Ext.create('Ext.ng.PagingBar', {
                store: store
            });

			var initConfig = {
				region: 'center',             
				store: store,
				columnLines: true,
				stateful: true,
				stateId: 'e0958854-881e-43c6-b748-d2cd9f40235a',   
				buskey: 'PhId', //对应的业务表主键属性         
				/*layout: {
					type: 'hbox',
					align: 'stretch'
				},            
				viewConfig: {
					forceFit: true,
					scrollOffset: 0
				},*/
				bbar: [pagingbar]
			};
 
			var gridConfig = Ext.apply(initConfig,individualInfo.grid['QTProduct']);
			var grid = Ext.create('Ext.ng.GridPanel',gridConfig);

            //布局
            var viewport = Ext.create('Ext.container.Viewport', {
                id: "viewPort",
                layout: 'border',
				items: [ngToolbar, grid]
            });

            //新增
            ngToolbar.get('add').on('click', function () {
                $OpenTab(pageName + '-新增', C_ROOT + 'GQT/QT/QTProduct/QTProductEdit?otype=add');
            });

            //修改
            ngToolbar.get('edit').on('click', function () {
                var data = grid.getSelectionModel().getSelection();
                
                if (data.length > 0) {
                    var id = data[0].get('PhId');
                    $OpenTab(pageName + '-修改', C_ROOT + 'GQT/QT/QTProduct/QTProductEdit?otype=edit&id=' + id);
                }
            });

			//删除
            ngToolbar.get('delete').on('click', function () {
                var data = grid.getSelectionModel().getSelection();

                if (data.length > 0) {
                    recoderefresh(data);
                
                    Ext.MessageBox.confirm('提示', '是否删除此记录？', callBack);

                    function callBack(callBackid) {
                        if (callBackid.toString() == "no" || callBackid.toString() == "cancel") {
                            return;
                        } else {
                            Ext.Ajax.request({
                                params: { 'id': data[0].get('PhId') },
                                url: C_ROOT + 'GQT/QT/QTProduct/Delete',
                                success: function (response) {
                                    var resp = Ext.JSON.decode(response.responseText);
                                    if (resp.Status === "success") {

                                        Ext.Array.each(data, function (record) {
                                            store.remove(record); //前端删除
                                        });

                                        NGMsg.Info('删除成功！');
                                    } else {
                                        NGMsg.Info('删除失败！');
                                    }
                                }
                            });
                        }
                    }
                }
            });

            //查看
            ngToolbar.get('view').on('click', function () {
                var data = grid.getSelectionModel().getSelection();

                if (data.length > 0) {
                    var id = data[0].get('PhId');
                    $OpenTab(pageName + '-查看', C_ROOT + 'GQT/QT/QTProduct/QTProductEdit?otype=view&id=' + id);
                }
            });

            //打印
            /*ngToolbar.get('print').on('click', function () {
				$Print("PrintTest1", grid, "列表");
            });*/
			
			ngToolbar.get('TB').on('click', function () {
				var data = grid.getSelectionModel().getSelection();
				if (data.length > 0) {
					Ext.Ajax.request({
						params: { 'ProductBZ': data[0].data.ProductBZ},
						url: C_ROOT + 'GQT/QT/QTProductUserDygx/JudgeByProduct',
						async: false,
						success: function (response) {
							var resp = Ext.JSON.decode(response.responseText);
							if (resp.Status === "success") { //未设置过
								Ext.Ajax.request({
									params: { 'ProductBZ': data[0].data.ProductBZ},
									url: C_ROOT + 'GQT/QT/QTProductUserDygx/SaveByProduct',
									async: false,
									success: function (response) {
										var resp = Ext.JSON.decode(response.responseText);
										if (resp.Status === "success") { 
											Ext.MessageBox.alert('提示', '同步成功！');
										}else{
											Ext.MessageBox.alert('提示', resp.Msg);
										}
									}
								});
							}else{
								Ext.MessageBox.confirm('提示', resp.Msg+',是否删除', callBack);
								function callBack(callBackid) {
									if (callBackid.toString() == "cancel") {
										return;
									} else if (callBackid.toString() == "yes"){
										Ext.Ajax.request({
											params: { 'ProductBZ': data[0].data.ProductBZ},
											url: C_ROOT + 'GQT/QT/QTProductUserDygx/SaveByProductIfDelete',
											async: false,
											success: function (response) {
												var resp = Ext.JSON.decode(response.responseText);
												if (resp.Status === "success") { 
													Ext.MessageBox.alert('提示', '同步成功！');
												}else{
													Ext.MessageBox.alert('提示', resp.Msg);
												}
											}
										});
									} else if (callBackid.toString() == "no"){
										Ext.Ajax.request({
											params: { 'ProductBZ': data[0].data.ProductBZ},
											url: C_ROOT + 'GQT/QT/QTProductUserDygx/SaveByProductNoDelete',
											async: false,
											success: function (response) {
												var resp = Ext.JSON.decode(response.responseText);
												if (resp.Status === "success") { 
													Ext.MessageBox.alert('提示', '同步成功！');
												}else{
													Ext.MessageBox.alert('提示', resp.Msg);
												}
											}
										});
									}
								}
							}
						}
					});
				}
			});

			//刷新列表中想修改或删除的行数据
            var recoderefresh = function (data) {
                var jsonStr = "{PhId:" + data[0].get('PhId') + "}";
                Ext.Ajax.request({
                    params: { 'queryfilter': jsonStr, 'limit': 1 },
					url: C_ROOT + 'GQT/QT/QTProduct/GetQTProductList',
                    async: false, //同步请求
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.Record.length === 1) {
                            Ext.apply(data[0].data, resp.Record[0]);
                            grid.getView().refresh(true);
                        }
                    }
                });
            };

        });

		function NG3Refresh() {
            store.load();
        }

    </script>
}


