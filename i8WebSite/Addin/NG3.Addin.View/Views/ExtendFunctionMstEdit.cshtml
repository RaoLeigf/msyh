@{
    ViewBag.Title = "ExtendFunctionMstEdit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Script
{  
    <script type="text/javascript">
		var langInfo = Ext.htmlDecode('@ViewBag.NG3Lang');
        var Lang = Ext.isEmpty(langInfo)? {} : Ext.decode(langInfo); //自定义

        var otype = '@ViewBag.OType';
        var busid = '@ViewBag.ID';
		//var busno = '@ViewBag.No';

           Ext.onReady(function () {

               //工具栏
               var ngToolbar = Ext.create('Ext.ng.Toolbar', {
                   region: 'north',
                   //rightName: '', //权限名称
                   ngbuttons: [
                       'save'
                   ]
               });

            var mstform = Ext.create('Ext.ng.TableLayoutForm', {
                region: 'north',
                frame: true,
                split: true,
                minWidth: 400,
                autoScroll: true,
                buskey: 'Phid', //对应的业务表主键属性
                otype: otype, //操作类型,add||edit||view
                columnsPerRow: 4,
                fieldDefaults: {
                    labelWidth: 87,
                    anchor: '100%',
                    margin: '0 10 5 0',
                    msgTarget: 'side'
                },
                fields: [
                    {
                        xtype: 'ngText',
                        fieldLabel: '新增功能名称',
                        name: 'FuncName',
                        itemId: 'FuncName',
                        readOnly: false,
                        mustInput: false,
                        colspan: 1
                    },
					{
					    xtype: 'ngComboBox',
					    fieldLabel: Lang.FuncType || '功能扩展类型',
					    name: 'FuncType',
					    id: 'FuncType',
					    queryMode: 'local', //local指定为本地数据,如果是后台传输则值为remote
					    //outFilter: {},
					    editable: false,
					    mustInput: false,
					    valueType: 'int',
					    datasource: 'default', //加载的数据源类型
					    data: [{
					        "code": 0,
					        "name": "SQL"
					    }, {
					        "code": 1,
					        "name": "插件程序集"
					    }
                        //,{
					    //    "code": 3,
					    //    "name": "Url"
					    //}
					    ],
					    colspan: 1
					}, {
					    xtype: 'container',
					    hidden: true,
					    items: [
							{
							    xtype: 'hiddenfield',
							    fieldLabel: 'Phid',
							    name: 'Phid',
							    itemId: 'Phid'
							},  {
							    xtype: 'hiddenfield',
							    fieldLabel: '目标controller',
							    name: 'TargetController',
							    itemId: 'TargetController'
							},
                             {
                                 xtype: 'hiddenfield',
                                 fieldLabel: 'Url',
                                 name: 'Url',
                                 itemId: 'Url'
                             }
					    ]
					}
                ]
            });


            Ext.define('sqlgridmodel', {
                extend: 'Ext.data.Model',
                fields: [
					{
					    name: 'Phid',
					    type: 'string',//因为页面不支持int64，所以这里做特殊处理
					    mapping: 'Phid'
					}, {
					    name: 'MstPhid',
					    type: 'string',//因为页面不支持int64，所以这里做特殊处理
					    mapping: 'MstPhid'
					}, {
					    name: 'FromDs',
					    type: 'string',
					    mapping: 'FromDs'
					}, {
					    name: 'RowsType',
					    type: 'int',
					    mapping: 'RowsType'
					}, {
					    name: 'SqlType',
					    type: 'int',
					    mapping: 'SqlType'
					}, {
					    name: 'ToTable',
					    type: 'string',
					    mapping: 'ToTable'
					}, {
					    name: 'ToTableKey',
					    type: 'string',
					    mapping: 'ToTableKey'
					}, {
					    name: 'SqlText',
					    type: 'string',
					    mapping: 'SqlText'
					}
                ]
            });

            var sqlgridstore = Ext.create('Ext.ng.JsonStore', {
                model: 'sqlgridmodel',
                pageSize: 25,
                autoLoad: false,
                url: '../ExtendFunctionMst/GetAddinSqlList?id=' + busid
            });

            var sqlgrid = Ext.create('Ext.ng.GridPanel', {
                minHeight: 400,
                id:"extendfuncsqlgrid",
                stateful: true,
                stateId: 'extendfuncsqlgrid',
               // forceFit:'true',
                store: sqlgridstore,
                buskey: 'Phid', //对应的业务表主键属性
                columnLines: true,
                selModel:{
                    mode:'single'
                },
                selType:'cellmodel',

                columns: [Ext.create('Ext.grid.RowNumberer', { text: '行号', width: 35 }),
					{
					    header: Lang.Phid || 'phid',
					    dataIndex: 'Phid',
					    width: 100,
					    sortable: false,
					    hidden: true
					}, {
					    header: Lang.MstPhid || '主表PHID',
					    dataIndex: 'MstPhid',
					    width: 100,
					    sortable: false,
					    hidden: true
					}, {
					    text: Lang.FromDs || '请求参数名称',
					    dataIndex: 'FromDs',
					    width: 200,
					    sortable: false,
					    hidden: false,
					    editor:{
					        xtype: "textfield"
					    }
					}, {
					    text: Lang.RowsType || '参数数据类型',
					    dataIndex: 'RowsType',
					    width: 100,
					    sortable: false,
					    hidden: false,
					    renderer: function (val, cell) {
					        switch (val) {
					            //case 0:
					            //    return "空";
					            case 1:
					                return "新增行";
					            case 2:
					                return "删除行";
					            case 3:
					                return "修改行";
					            case 4:
					                return "所有行";
					        }
					    },
					    editor: {
					        xtype: 'ngComboBox',
					        queryMode: 'local', //local指定为本地数据,如果是后台传输则值为remote
					        //outFilter: {},
					        editable: false,
					        mustInput: false,
					        valueType: 'int',
					        datasource: 'default', //加载的数据源类型
					        data: [
                            //    {
					        //    "code": 0,
					        //    "name": "空"
					        //},
                            {
					            "code": 1,
					            "name": "新增行"
					        }, {
					            "code": 2,
					            "name": "删除行"
					        }, {
					            "code": 3,
					            "name": "修改行"
					        }, {
					            "code": 4,
					            "name": "所有行"
					        }],
					        colspan: 1

					    }
					}, {
					    header: Lang.SqlType || 'SQL类型',
					    dataIndex: 'SqlType',
					    width: 100,
					    sortable: false,
					    hidden: false,
					    renderer: function (val, cell) {
					        switch (val) {
					            case 0:
					                return "SQL语句";
					            case 1:
					                return "存储过程";
					            case 2:
					                return "SQL函数";
					            case 3:
					                return "内置方法";
					        }
					    },
					    editor: {
					        xtype: 'ngComboBox',
					        queryMode: 'local', //local指定为本地数据,如果是后台传输则值为remote
					        //outFilter: {},
					        editable: false,
					        mustInput: false,
					        valueType: 'int',
					        datasource: 'default', //加载的数据源类型
					        data: [{
					            "code": 0,
					            "name": "SQL语句"
					        },
                            //{
					        //    "code": 1,
					        //    "name": "存储过程"
                            //},
                            {
					            "code": 2,
					            "name": "SQL函数"
                            }
                            //, {
					        //    "code": 3,
					        //    "name": "内置方法"
                            //}
					        ],
					        colspan: 1
					    }
					}, {
					    header: Lang.ToTable || '保存到指定表',
					    dataIndex: 'ToTable',
					    width: 150,
					    sortable: false,
					    hidden: true,
					    editor: {
					        xtype: "textfield"
					    }
					}, {
					    header: Lang.ToTableKey || '用来存入主表的主键列',
					    dataIndex: 'ToTableKey',
					    width: 150,
					    sortable: false,
					    hidden: true,
					    editor: {
					        xtype: "textfield"
					    }
					}, {
					    header: Lang.SqlText || 'SQL文本',
					    dataIndex: 'SqlText',
					    flex: 1,
					    sortable: false,
					    hidden: false,
					    editor: {
					        xtype: "textfield"
					    }
					}
                ],
                plugins: [Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 })]

            });



            Ext.define('urlmodel', {
                extend: 'Ext.data.Model',
                fields: [
					{
					    name: 'Url',
					    type: 'string',//因为页面不支持int64，所以这里做特殊处理
					    mapping: 'Url'
					},
                    {
                        name: 'Phid',
                     type: 'string',//因为页面不支持int64，所以这里做特殊处理
                    mapping: 'Phid'
                     }
                ]
            });

            var urlstore = Ext.create('Ext.ng.JsonStore', {
                model: 'urlmodel',
                pageSize: 25,
                autoLoad: false,
                url: '../ExtendFunctionMst/GetAddinUrlList?id=' + busid
            });



            var urlgrid = Ext.create('Ext.ng.GridPanel', {
                //frame: true,
                id: "urlgrid",
                stateful: true,
                stateId: 'urlgrid',
                store: urlstore,
                columnLines: true,
                buskey: 'Phid', //对应的业务表主键属性
                selModel: {
                    mode: 'single'
                },
                selType: 'cellmodel',
                columns: [Ext.create('Ext.grid.RowNumberer', { text: '行号', width: 35 }),
                    {
                        header: Lang.Phid || 'Phid',
                        dataIndex: 'Phid',
                        width: 100,
                        sortable: false,
                        hidden: true
                    },
					{
					    header: Lang.Url || 'Url',
					    dataIndex: 'Url',
					    flex:1,
					    sortable: false,
					    hidden: false,
					    editor:
                        {
                        xtype:"textfield"
                        }
					}],
                plugins: [Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 })]
            });




            //定义模型
            Ext.define('assemblymodel', {
                extend: 'Ext.data.Model',
                fields: [
					{
					    name: 'Phid',
					    type: 'string',//因为页面不支持int64，所以这里做特殊处理
					    mapping: 'Phid'
					}, {
					    name: 'MstPhid',
					    type: 'string',
					    mapping: 'MstPhid'
					}, {
					    name: 'AssemblyName',
					    type: 'string',
					    mapping: 'AssemblyName'
					}, {
					    name: 'ClassName',
					    type: 'string',
					    mapping: 'ClassName'
					}
                ]
            });

            var assemblystore = Ext.create('Ext.ng.JsonStore', {
                model: 'assemblymodel',
                pageSize: 25,
                autoLoad: false,
                url: '../ExtendFunctionMst/GetAddinAssemblyList?id=' + busid
            });


            var assemblygrid = Ext.create('Ext.ng.GridPanel', {
                //frame: true,
                id: "assemblygrid",
                height:400,
                stateful: true,
                stateId: 'extendassemblygrid',
                store: assemblystore,
                buskey: 'Phid', //对应的业务表主键属性
                columnLines: true,
                selModel: {
                    mode: 'single'
                },
                selType: 'cellmodel',
                columns: [Ext.create('Ext.grid.RowNumberer', { text: '行号', width: 35 }),
					{
					    header: Lang.Phid || 'Phid',
					    dataIndex: 'Phid',
					    width: 100,
					    sortable: false,
					    hidden: true
					}, {
					    header: Lang.MstPhid || '主表PHID',
					    dataIndex: 'MstPhid',
					    width: 100,
					    sortable: false,
					    hidden: true
					}, {
					    header: Lang.AssemblyName || '程序集名称',
					    dataIndex: 'AssemblyName',
					    flex:1,
					    sortable: false,
					    hidden: false,
					    editor:{xtype:"textfield"}
					}, {
					    header: Lang.ClassName || '插件类名',
					    dataIndex: 'ClassName',
					    flex:2,
					    sortable: false,
					    hidden: false,
					    editor: { xtype: "textfield" }
					}
                ]
                ,
                plugins: [Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 })]

            });




            var tabItems = [
              {
                  id: 'tab_sql',
                  //layout: 'border', //使grid填充
                  title: 'SQL编程',
                  autoScroll: true,
                  layout: 'fit',
                  closeAction: 'hide',
                  //autoScroll: true,
                  //height:400,
                  //defaults: { width: 230 },
                  //defaultType: 'textfield',
                  items: [sqlgrid]
              }
              ,
              //{
              //    id: 'tab_url',
              //    title: 'Url',
              //    autoScroll: true,
              //    layout: 'fit',
              //    closeAction: 'hide',
              //    //contentEl: 'center1'
              //    //defaults: { width: 230 },
              //    //defaultType: 'textfield',
              //    items: [urlgrid]
              //},

              {
                  id: 'tab_assembly',
                  title: '程序集',
                  autoScroll: true,
                  layout: 'fit',
                  closeAction: 'hide',
                  //contentEl: 'center1'
                  //defaults: { width: 230 },
                  //defaultType: 'textfield',
                  items: [assemblygrid]
              }
            ];




            var tabPanel = Ext.create('Ext.tab.Panel', {
                //renderTo: 'tabpanel',
                //xtype: 'tabpanel',
                //layout: 'border',
                id:"tabs",
                region: 'center',
                deferredRender: false,
                plain: true,
                //activeTab: 0,
                minHeight: 400,
                minWidth: 600,
                defaults: { bodyStyle: 'padding:1px' },
                items: tabItems

            });



            //定义模型


            //布局
            var viewport = Ext.create('Ext.container.Viewport', {
                layout: 'border',
                items: [ngToolbar, {
                    xtype: 'panel',
                    region: 'center',
                    autoScroll: true,
                    overflowY: 'scroll',
                    layout: 'border',
                    bodyStyle: "padding-right:5px",
                    items: [mstform, tabPanel]
                }]
            });


            //事件处理



            //当修改、查看时取数、绑定
            if (otype == $Otype.EDIT || otype == $Otype.VIEW) {
                Ext.Ajax.request({
                    params: { 'id': busid, 'tabtype': 'extendFuncMst' },
                    url: '@Url.Content("~/Addin/ExtendFunctionMst/GetExtendFunctionMstInfo")',
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.Status === "success") {
                            var mstformobj = mstform.getForm();
                            mstformobj.setValues(resp.Data);
                           
                            //将数据直接
                            
                            //代码转名称
                            var codectl = [];
                            BatchBindCombox(codectl);

                            //设置为只读
                            Ext.getCmp("FuncType").setReadOnly(true);


                            //取数
                            assemblystore.load();
                            urlstore.load();
                            sqlgridstore.load();


                        } else {
                            Ext.MessageBox.alert('取数失败', resp.Msg);
                        }
                    }
                });
            }

            //当新增时
            if (otype == $Otype.ADD) {
                //if (busno != undefined && busno != "") {
                //    Ext.getCmp("No").userSetReadOnly(true);
                //    Ext.getCmp("No").setValue(busno);
                //}
            }

            //当修改时
            if (otype == $Otype.EDIT) {
            }

            //当查看时
            if (otype == $Otype.VIEW) {
                ngToolbar.get('save').disable();
            }

           
            ngToolbar.get('save').on('click', function () {
                var mstvf = mstform.isValid();

                if (!mstvf) {
                    return;
                }

                var mstformData = mstform.getFormData();

                

                var sqlgriddata = sqlgrid.getChange();

                var urlgriddata = urlgrid.getChange();


                var assemblydata = assemblygrid.getChange();



                Ext.Ajax.request({
                    params: {
                        'mstformData': mstformData, 'sqlgriddata': sqlgriddata,
                        'urlgriddata': urlgriddata, 'assemblydata': assemblydata
                    },
                    url: '@Url.Content("~/Addin/ExtendFunctionMst/Save")',
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.Status === "success") {
                            Ext.MessageBox.alert('提示', "保存成功", function () {

                                var frame = $GetWFrame();
                                if (frame) {
                                    var listref = frame.ListObserver.get('ExtendFunctionMstList');
                                    var data = mstform.getForm().getValues();
                                    data.Phid = resp.KeyCodes[0];//赋主键值
                                    listref.fireEvent('refreshlist', data);
                                }

                                $CloseTab();
                            });

                        } else {
                            Ext.MessageBox.alert('保存失败', resp.Msg);
                        }
                    }
                });
            });


            ////附件
            //ngToolbar.get('attachment').on('click', function () {
            //    alert("attachment");
            //});

            ////打印
            //ngToolbar.get('print').on('click', function () {
            //    alert("print");
            //});


        });

        //事件绑定
        Ext.onReady(function () {
            event.bindEvent();
            event.initPage();
        });

        var event = {
            initPage: function(){
                this.AddSql();
                this.AddAssembly();
                //this.AddUrl();

                //tab页隐藏
                var tabs = Ext.getCmp("tabs");
               // tabs.tabBar.items.items[1].hide(); //tab_url
                tabs.tabBar.items.items[1].hide(); //tab_assembly

                //新增功能类型
                var functype = Ext.getCmp("FuncType").setValue(0);

            },
            bindEvent: function () {
                var functype = Ext.getCmp("FuncType");
                functype.on("change", this.FuncTypeChange);


            },

            FuncTypeChange: function(obj,newValue,oldValue,eOpts)
            {
                var tabs = Ext.getCmp("tabs");

                if(newValue==0) //sql
                {
                    tabs.tabBar.items.items[0].show(); //tab_sql
                    //tabs.tabBar.items.items[1].hide(); //tab_url
                    tabs.tabBar.items.items[1].hide(); //tab_assembly

                    tabs.setActiveTab(0);

                }else if(newValue==1)//assembly
                {
                    tabs.tabBar.items.items[0].hide(); //tab_sql
                    //tabs.tabBar.items.items[1].hide(); //tab_url
                    tabs.tabBar.items.items[1].show(); //tab_assembly
                    tabs.setActiveTab(1);
                }else if(newValue==3) //url
                {
                    tabs.tabBar.items.items[0].hide(); //tab_sql
                    //tabs.tabBar.items.items[1].show(); //tab_url
                    tabs.tabBar.items.items[1].hide(); //tab_assembly
                    tabs.setActiveTab(1);
                }
            },
            AddUrl: function () {
                var grid = Ext.getCmp('urlgrid');
                var row = [{
                    'url': ''
                }];

                var store = grid.getStore();
                store.insert(store.getCount(), row);
            },
            AddSql: function () {
                var sqlgrid = Ext.getCmp('extendfuncsqlgrid');
                var row = [{
                    'Phid':'',
                    'MstPhid':'',
                    'FromDs': '',
                    'RowsType': 4,
                    'SqlType': '',
                    'SqlText': '',
                    'ToTable': '',
                    'ToTableKey':''
                }];

                var store = sqlgrid.getStore();
                store.insert(store.getCount(), row);
            },
            DeleteRecord: function (btn) {


                var grid = Ext.getCmp(btn.pid);
                if (Ext.isEmpty(grid)) return;

                var data = grid.getSelectionModel().getSelection();
                if (Ext.isEmpty(data)) {
                    Ext.Msg.alert("提示","请先选择行!");
                    return;
                }
                Ext.MessageBox.confirm('提示', '是否确定删除该记录?', function (btn) {
                    if(btn!='yes')
                    {
                        return;
                    }
                    var store = grid.getStore();
                    store.remove(data);
                });

            },

            AddAssembly:function(){
                var grid = Ext.getCmp('assemblygrid');
                var row = [{
                    'Phid': '',
                    'MstPhid': '',
                    'AssemblyName': '',
                    'ClassName': ''

                }];

                var store = grid.getStore();
                store.insert(store.getCount(), row);
            }


        };




    </script>
}
