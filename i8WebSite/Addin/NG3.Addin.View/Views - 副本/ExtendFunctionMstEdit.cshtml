@{
    ViewBag.Title = "ExtendFunctionMstEdit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Script
{  
    <script type="text/javascript">
		var langInfo = Ext.htmlDecode('@ViewBag.NG3Lang');
        var Lang = Ext.isEmpty(langInfo)? {} : Ext.decode(langInfo); //自定义

        var otype = '@ViewBag.OType';
        var busid = '@ViewBag.ID';
		//var busno = '@ViewBag.No';

        Ext.onReady(function () {

            //工具栏
            var ngToolbar = Ext.create('Ext.ng.Toolbar', {
                region: 'north',
                ngbuttons: [
                    'save', 'attachment', 'addrow', 'deleterow', '->', 'print', 'close'
                ]
            });

            var mstform = Ext.create('Ext.ng.TableLayoutForm', {
                region: 'north',
                frame: true,
                split: true,
                minWidth: 400,
                autoScroll: true,
                buskey: 'Phid', //对应的业务表主键属性
                otype: otype, //操作类型,add||edit||view
                columnsPerRow: 4,
                fieldDefaults: {
                    labelWidth: 87,
                    anchor: '100%',
                    margin: '0 10 5 0',
                    msgTarget: 'side'
                },
                fields: [
					{
						xtype: 'ngComboBox',
						fieldLabel: Lang.FuncType || '功能扩展类型',
						name: 'FuncType',
						id: 'FuncType',
						queryMode: 'local', //local指定为本地数据,如果是后台传输则值为remote
						//outFilter: {},
						editable: false,
						mustInput: false,
						valueType: 'int',
						datasource: 'default', //加载的数据源类型
						data: [{
							"code": 0,
							"name": "Sql"
						},{
							"code": 1,
							"name": "插件程序集"
						},{
							"code": 2,
							"name": "表达式"
						},{
							"code": 3,
							"name": "Url"
						}],
						colspan: 1
					},{
						xtype: 'ngText',
						fieldLabel: Lang.Url || '重新定位的URL',
						name: 'Url',
						itemId: 'Url',
						readOnly: false,
						mustInput: false,
						colspan: 1 
					},{
						xtype: 'container',
						hidden: true,
						items: [
							{
								xtype: 'hiddenfield',
								fieldLabel: 'Phid',
								name: 'Phid',
								itemId: 'Phid'
							},{
								xtype: 'hiddenfield',
								fieldLabel: '功能名称',
								name: 'FuncName',
								itemId: 'FuncName'
							},{
								xtype: 'hiddenfield',
								fieldLabel: '目标controller',
								name: 'TargetController',
								itemId: 'TargetController'
							}
						]
					}
				]
            });


			//布局
            var viewport = Ext.create('Ext.container.Viewport', {
                layout: 'border',
                items: [ngToolbar, {
                    xtype: 'panel',
                    region: 'center',
                    autoScroll: true,
                    overflowY: 'scroll',
                    layout: 'border',
                    bodyStyle: "padding-right:20px",
                    items: [mstform]
                }]
            });

			//当修改、查看时取数、绑定
            if (otype == $Otype.EDIT || otype == $Otype.VIEW) {
                Ext.Ajax.request({
                    params: { 'id': busid, 'tabtype': 'extendfunctionmst' },
                    url: '@Url.Content("~/[需替换成AreaName]/ExtendFunctionMst/GetExtendFunctionMstInfo")',
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.Status === "success") {
                            var mstformobj = mstform.getForm();
                            mstformobj.setValues(resp.Data);

							//代码转名称
                            var codectl = [];
                            BatchBindCombox(codectl);

                        } else {
                            Ext.MessageBox.alert('取数失败', resp.Msg);
                        }
                    }
                });
            }

			//当新增时
            if (otype == $Otype.ADD) {
				//if (busno != undefined && busno != "") {
                //    Ext.getCmp("No").userSetReadOnly(true);
                //    Ext.getCmp("No").setValue(busno);
                //}
            }

			//当修改时
            if (otype == $Otype.EDIT) {
            }

			//当查看时
            if (otype == $Otype.VIEW) {
                ngToolbar.get('save').disable();
            }

            //保存
            ngToolbar.get('save').on('click', function () {
                var mstvf = mstform.isValid();

                if (!mstvf) {
                    return;
                }

                var mstformData = mstform.getFormData();

                Ext.Ajax.request({
                    params: {
						'mstformData': mstformData
                    },
                    url: '@Url.Content("~/[需替换成AreaName]/ExtendFunctionMst/save")',
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.Status === "success") {
                            Ext.MessageBox.alert('提示', "保存成功", function () {

                                var frame = $GetWFrame();
                                if (frame) {
                                    var listref = frame.ListObserver.get('ExtendFunctionMstList');
                                    var data = mstform.getForm().getValues();
									data.Phid = resp.KeyCodes[0];//赋主键值
                                    listref.fireEvent('refreshlist', data);
                                }

                                $CloseTab();
                            });

                        } else {
                            Ext.MessageBox.alert('保存失败', resp.Msg);
                        }
                    }
                });
            });


            //附件
            ngToolbar.get('attachment').on('click', function () {
                alert("attachment");
            });

            //打印
            ngToolbar.get('print').on('click', function () {
                alert("print");
            });


        });
        
    </script>
}
